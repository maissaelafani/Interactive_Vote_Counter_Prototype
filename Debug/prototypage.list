
prototypage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d3c  08005c2c  08005c2c  00015c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007968  08007968  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007968  08007968  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007968  08007968  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007968  08007968  00017968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800796c  0800796c  0001796c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  20000070  080079e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000784  080079e0  00020784  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012134  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000269f  00000000  00000000  00032217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  000348b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb1  00000000  00000000  000358e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000169c7  00000000  00000000  00036599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000153cf  00000000  00000000  0004cf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089e8f  00000000  00000000  0006232f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004944  00000000  00000000  000ec1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000f0b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c14 	.word	0x08005c14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005c14 	.word	0x08005c14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ssd1306_DrawLogo>:
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void ssd1306_DrawLogo()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af02      	add	r7, sp, #8
	ssd1306_Init();
 8000276:	f000 fb75 	bl	8000964 <ssd1306_Init>
    ssd1306_Fill(Black);
 800027a:	2000      	movs	r0, #0
 800027c:	f000 fbdc 	bl	8000a38 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000280:	2100      	movs	r1, #0
 8000282:	2000      	movs	r0, #0
 8000284:	f000 fd1a 	bl	8000cbc <ssd1306_SetCursor>
    ssd1306_WriteString(".....DEMARRAGE.....", Font_7x10, White);
 8000288:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <ssd1306_DrawLogo+0x54>)
 800028a:	2301      	movs	r3, #1
 800028c:	ca06      	ldmia	r2, {r1, r2}
 800028e:	480e      	ldr	r0, [pc, #56]	; (80002c8 <ssd1306_DrawLogo+0x58>)
 8000290:	f000 fcee 	bl	8000c70 <ssd1306_WriteString>
    ssd1306_DrawBitmap(32,16,logo_vote,64,64,White);
 8000294:	2301      	movs	r3, #1
 8000296:	9301      	str	r3, [sp, #4]
 8000298:	2340      	movs	r3, #64	; 0x40
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	2340      	movs	r3, #64	; 0x40
 800029e:	4a0b      	ldr	r2, [pc, #44]	; (80002cc <ssd1306_DrawLogo+0x5c>)
 80002a0:	2110      	movs	r1, #16
 80002a2:	2020      	movs	r0, #32
 80002a4:	f000 fd22 	bl	8000cec <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80002a8:	f000 fbde 	bl	8000a68 <ssd1306_UpdateScreen>
    HAL_Delay(4000);
 80002ac:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80002b0:	f001 f802 	bl	80012b8 <HAL_Delay>
    ssd1306_Fill(Black);
 80002b4:	2000      	movs	r0, #0
 80002b6:	f000 fbbf 	bl	8000a38 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 80002ba:	f000 fbd5 	bl	8000a68 <ssd1306_UpdateScreen>
}
 80002be:	bf00      	nop
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	20000004 	.word	0x20000004
 80002c8:	08005c2c 	.word	0x08005c2c
 80002cc:	08005c44 	.word	0x08005c44

080002d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d4:	f000 ff8a 	bl	80011ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d8:	f000 f864 	bl	80003a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002dc:	f000 f9fc 	bl	80006d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002e0:	f000 f954 	bl	800058c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80002e4:	f000 f9c8 	bl	8000678 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80002e8:	f000 f8f8 	bl	80004dc <MX_TIM1_Init>
  MX_I2C1_Init();
 80002ec:	f000 f8b8 	bl	8000460 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  while(button_state == false)
 80002f0:	e00a      	b.n	8000308 <main+0x38>
  {
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET) {
 80002f2:	2110      	movs	r1, #16
 80002f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f8:	f001 fa86 	bl	8001808 <HAL_GPIO_ReadPin>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d102      	bne.n	8000308 <main+0x38>
    	  	  button_state = true;
 8000302:	4b22      	ldr	r3, [pc, #136]	; (800038c <main+0xbc>)
 8000304:	2201      	movs	r2, #1
 8000306:	701a      	strb	r2, [r3, #0]
  while(button_state == false)
 8000308:	4b20      	ldr	r3, [pc, #128]	; (800038c <main+0xbc>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	b2db      	uxtb	r3, r3
 800030e:	f083 0301 	eor.w	r3, r3, #1
 8000312:	b2db      	uxtb	r3, r3
 8000314:	2b00      	cmp	r3, #0
 8000316:	d1ec      	bne.n	80002f2 <main+0x22>
          }
      }
  button_state = false;
 8000318:	4b1c      	ldr	r3, [pc, #112]	; (800038c <main+0xbc>)
 800031a:	2200      	movs	r2, #0
 800031c:	701a      	strb	r2, [r3, #0]
  ssd1306_DrawLogo(); // Affichage démarrage du compteur
 800031e:	f7ff ffa7 	bl	8000270 <ssd1306_DrawLogo>

	  /*HAL_GPIO_WritePin(GPIOB, LD3_Pin , 1); //test entrée dans la boucle while
	  HAL_Delay(500);
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin , 0);
	  HAL_Delay(500);*/
	  while(button_state == false)
 8000322:	e021      	b.n	8000368 <main+0x98>
	    {
		  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000324:	2100      	movs	r1, #0
 8000326:	481a      	ldr	r0, [pc, #104]	; (8000390 <main+0xc0>)
 8000328:	f003 fca6 	bl	8003c78 <HAL_TIM_IC_Start_IT>
		  	  sprintf(str, "%d", cpt); //affichage du compteur permanent
 800032c:	4b19      	ldr	r3, [pc, #100]	; (8000394 <main+0xc4>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	461a      	mov	r2, r3
 8000332:	4919      	ldr	r1, [pc, #100]	; (8000398 <main+0xc8>)
 8000334:	4819      	ldr	r0, [pc, #100]	; (800039c <main+0xcc>)
 8000336:	f004 ffc9 	bl	80052cc <siprintf>
		  	  ssd1306_SetCursor(50, 25);
 800033a:	2119      	movs	r1, #25
 800033c:	2032      	movs	r0, #50	; 0x32
 800033e:	f000 fcbd 	bl	8000cbc <ssd1306_SetCursor>
		  	  ssd1306_WriteString(str, Font_16x26, White);
 8000342:	4a17      	ldr	r2, [pc, #92]	; (80003a0 <main+0xd0>)
 8000344:	2301      	movs	r3, #1
 8000346:	ca06      	ldmia	r2, {r1, r2}
 8000348:	4814      	ldr	r0, [pc, #80]	; (800039c <main+0xcc>)
 800034a:	f000 fc91 	bl	8000c70 <ssd1306_WriteString>
		  	  ssd1306_UpdateScreen();
 800034e:	f000 fb8b 	bl	8000a68 <ssd1306_UpdateScreen>

	            // Si le bouton est enfoncé, exécuter le reste du programme
	        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET) {
 8000352:	2110      	movs	r1, #16
 8000354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000358:	f001 fa56 	bl	8001808 <HAL_GPIO_ReadPin>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d102      	bne.n	8000368 <main+0x98>
	      	  	  button_state = true;
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <main+0xbc>)
 8000364:	2201      	movs	r2, #1
 8000366:	701a      	strb	r2, [r3, #0]
	  while(button_state == false)
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <main+0xbc>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	f083 0301 	eor.w	r3, r3, #1
 8000372:	b2db      	uxtb	r3, r3
 8000374:	2b00      	cmp	r3, #0
 8000376:	d1d5      	bne.n	8000324 <main+0x54>
	            }
	        }
	  button_state = false;
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <main+0xbc>)
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]
	  cpt = 0;
 800037e:	4b05      	ldr	r3, [pc, #20]	; (8000394 <main+0xc4>)
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
	  ssd1306_Init();
 8000384:	f000 faee 	bl	8000964 <ssd1306_Init>
	  while(button_state == false)
 8000388:	e7ee      	b.n	8000368 <main+0x98>
 800038a:	bf00      	nop
 800038c:	20000211 	.word	0x20000211
 8000390:	2000012c 	.word	0x2000012c
 8000394:	2000020c 	.word	0x2000020c
 8000398:	08005c40 	.word	0x08005c40
 800039c:	20000218 	.word	0x20000218
 80003a0:	2000000c 	.word	0x2000000c

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b09c      	sub	sp, #112	; 0x70
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003ae:	2228      	movs	r2, #40	; 0x28
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f004 ffc4 	bl	8005340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2230      	movs	r2, #48	; 0x30
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f004 ffb6 	bl	8005340 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d4:	2302      	movs	r3, #2
 80003d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d8:	2301      	movs	r3, #1
 80003da:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003dc:	2310      	movs	r3, #16
 80003de:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e0:	2302      	movs	r3, #2
 80003e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003e4:	2300      	movs	r3, #0
 80003e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80003e8:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80003ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003f2:	4618      	mov	r0, r3
 80003f4:	f001 fed8 	bl	80021a8 <HAL_RCC_OscConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80003fe:	f000 fa73 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000402:	230f      	movs	r3, #15
 8000404:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000406:	2302      	movs	r3, #2
 8000408:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000416:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800041a:	2101      	movs	r1, #1
 800041c:	4618      	mov	r0, r3
 800041e:	f002 ff01 	bl	8003224 <HAL_RCC_ClockConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000428:	f000 fa5e 	bl	80008e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 800042c:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000430:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000432:	2300      	movs	r3, #0
 8000434:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000436:	2300      	movs	r3, #0
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	4618      	mov	r0, r3
 800043e:	f003 f95b 	bl	80036f8 <HAL_RCCEx_PeriphCLKConfig>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000448:	f000 fa4e 	bl	80008e8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 800044c:	2200      	movs	r2, #0
 800044e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000452:	2000      	movs	r0, #0
 8000454:	f003 f862 	bl	800351c <HAL_RCC_MCOConfig>
}
 8000458:	bf00      	nop
 800045a:	3770      	adds	r7, #112	; 0x70
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <MX_I2C1_Init+0x74>)
 8000466:	4a1c      	ldr	r2, [pc, #112]	; (80004d8 <MX_I2C1_Init+0x78>)
 8000468:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800046a:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <MX_I2C1_Init+0x74>)
 800046c:	f240 220b 	movw	r2, #523	; 0x20b
 8000470:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000472:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <MX_I2C1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000478:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <MX_I2C1_Init+0x74>)
 800047a:	2201      	movs	r2, #1
 800047c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <MX_I2C1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <MX_I2C1_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800048a:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <MX_I2C1_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000490:	4b10      	ldr	r3, [pc, #64]	; (80004d4 <MX_I2C1_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <MX_I2C1_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800049c:	480d      	ldr	r0, [pc, #52]	; (80004d4 <MX_I2C1_Init+0x74>)
 800049e:	f001 f9e3 	bl	8001868 <HAL_I2C_Init>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004a8:	f000 fa1e 	bl	80008e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004ac:	2100      	movs	r1, #0
 80004ae:	4809      	ldr	r0, [pc, #36]	; (80004d4 <MX_I2C1_Init+0x74>)
 80004b0:	f001 fde2 	bl	8002078 <HAL_I2CEx_ConfigAnalogFilter>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80004ba:	f000 fa15 	bl	80008e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004be:	2100      	movs	r1, #0
 80004c0:	4804      	ldr	r0, [pc, #16]	; (80004d4 <MX_I2C1_Init+0x74>)
 80004c2:	f001 fe24 	bl	800210e <HAL_I2CEx_ConfigDigitalFilter>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80004cc:	f000 fa0c 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	2000008c 	.word	0x2000008c
 80004d8:	40005400 	.word	0x40005400

080004dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004e2:	f107 0310 	add.w	r3, r7, #16
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004fa:	4b22      	ldr	r3, [pc, #136]	; (8000584 <MX_TIM1_Init+0xa8>)
 80004fc:	4a22      	ldr	r2, [pc, #136]	; (8000588 <MX_TIM1_Init+0xac>)
 80004fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 8000500:	4b20      	ldr	r3, [pc, #128]	; (8000584 <MX_TIM1_Init+0xa8>)
 8000502:	f242 720f 	movw	r2, #9999	; 0x270f
 8000506:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000508:	4b1e      	ldr	r3, [pc, #120]	; (8000584 <MX_TIM1_Init+0xa8>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1725;
 800050e:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <MX_TIM1_Init+0xa8>)
 8000510:	f240 62bd 	movw	r2, #1725	; 0x6bd
 8000514:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000516:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <MX_TIM1_Init+0xa8>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800051c:	4b19      	ldr	r3, [pc, #100]	; (8000584 <MX_TIM1_Init+0xa8>)
 800051e:	2200      	movs	r2, #0
 8000520:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <MX_TIM1_Init+0xa8>)
 8000524:	2280      	movs	r2, #128	; 0x80
 8000526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000528:	4816      	ldr	r0, [pc, #88]	; (8000584 <MX_TIM1_Init+0xa8>)
 800052a:	f003 fa69 	bl	8003a00 <HAL_TIM_Base_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000534:	f000 f9d8 	bl	80008e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800053c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	4619      	mov	r1, r3
 8000544:	480f      	ldr	r0, [pc, #60]	; (8000584 <MX_TIM1_Init+0xa8>)
 8000546:	f003 ff3e 	bl	80043c6 <HAL_TIM_ConfigClockSource>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000550:	f000 f9ca 	bl	80008e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	4619      	mov	r1, r3
 8000564:	4807      	ldr	r0, [pc, #28]	; (8000584 <MX_TIM1_Init+0xa8>)
 8000566:	f004 fa93 	bl	8004a90 <HAL_TIMEx_MasterConfigSynchronization>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000570:	f000 f9ba 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_IC_Init(&htim1);
 8000574:	4803      	ldr	r0, [pc, #12]	; (8000584 <MX_TIM1_Init+0xa8>)
 8000576:	f003 fb1e 	bl	8003bb6 <HAL_TIM_IC_Init>

  /* USER CODE END TIM1_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200000e0 	.word	0x200000e0
 8000588:	40012c00 	.word	0x40012c00

0800058c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	; 0x30
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005b8:	4b2e      	ldr	r3, [pc, #184]	; (8000674 <MX_TIM2_Init+0xe8>)
 80005ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005c0:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <MX_TIM2_Init+0xe8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c6:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <MX_TIM2_Init+0xe8>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80005cc:	4b29      	ldr	r3, [pc, #164]	; (8000674 <MX_TIM2_Init+0xe8>)
 80005ce:	f04f 32ff 	mov.w	r2, #4294967295
 80005d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <MX_TIM2_Init+0xe8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_TIM2_Init+0xe8>)
 80005dc:	2280      	movs	r2, #128	; 0x80
 80005de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005e0:	4824      	ldr	r0, [pc, #144]	; (8000674 <MX_TIM2_Init+0xe8>)
 80005e2:	f003 fa0d 	bl	8003a00 <HAL_TIM_Base_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80005ec:	f000 f97c 	bl	80008e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	4619      	mov	r1, r3
 80005fc:	481d      	ldr	r0, [pc, #116]	; (8000674 <MX_TIM2_Init+0xe8>)
 80005fe:	f003 fee2 	bl	80043c6 <HAL_TIM_ConfigClockSource>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000608:	f000 f96e 	bl	80008e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800060c:	4819      	ldr	r0, [pc, #100]	; (8000674 <MX_TIM2_Init+0xe8>)
 800060e:	f003 fad2 	bl	8003bb6 <HAL_TIM_IC_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000618:	f000 f966 	bl	80008e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4619      	mov	r1, r3
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <MX_TIM2_Init+0xe8>)
 800062c:	f004 fa30 	bl	8004a90 <HAL_TIMEx_MasterConfigSynchronization>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000636:	f000 f957 	bl	80008e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800063e:	2301      	movs	r3, #1
 8000640:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	4619      	mov	r1, r3
 8000650:	4808      	ldr	r0, [pc, #32]	; (8000674 <MX_TIM2_Init+0xe8>)
 8000652:	f003 fe1c 	bl	800428e <HAL_TIM_IC_ConfigChannel>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 800065c:	f000 f944 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_IC_Init(&htim2);
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <MX_TIM2_Init+0xe8>)
 8000662:	f003 faa8 	bl	8003bb6 <HAL_TIM_IC_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000666:	4803      	ldr	r0, [pc, #12]	; (8000674 <MX_TIM2_Init+0xe8>)
 8000668:	f003 fa22 	bl	8003ab0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM2_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3730      	adds	r7, #48	; 0x30
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000012c 	.word	0x2000012c

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 800067e:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <MX_USART2_UART_Init+0x5c>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006bc:	f004 fa6c 	bl	8004b98 <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006c6:	f000 f90f 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000178 	.word	0x20000178
 80006d4:	40004400 	.word	0x40004400

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <MX_GPIO_Init+0xcc>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a2c      	ldr	r2, [pc, #176]	; (80007a4 <MX_GPIO_Init+0xcc>)
 80006f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f8:	6153      	str	r3, [r2, #20]
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <MX_GPIO_Init+0xcc>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <MX_GPIO_Init+0xcc>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <MX_GPIO_Init+0xcc>)
 800070c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MX_GPIO_Init+0xcc>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_GPIO_Init+0xcc>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a20      	ldr	r2, [pc, #128]	; (80007a4 <MX_GPIO_Init+0xcc>)
 8000724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_GPIO_Init+0xcc>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2108      	movs	r1, #8
 800073a:	481b      	ldr	r0, [pc, #108]	; (80007a8 <MX_GPIO_Init+0xd0>)
 800073c:	f001 f87c 	bl	8001838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000740:	2310      	movs	r3, #16
 8000742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	4619      	mov	r1, r3
 8000752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000756:	f000 fee5 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800075a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800075e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	4619      	mov	r1, r3
 8000776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077a:	f000 fed3 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800077e:	2308      	movs	r3, #8
 8000780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4619      	mov	r1, r3
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0xd0>)
 8000796:	f000 fec5 	bl	8001524 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079a:	bf00      	nop
 800079c:	3720      	adds	r7, #32
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000
 80007a8:	48000400 	.word	0x48000400

080007ac <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim2)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]

	if (htim2->Instance == TIM2)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007bc:	d152      	bne.n	8000864 <HAL_TIM_IC_CaptureCallback+0xb8>
	{

		if (first == 1)
 80007be:	4b2b      	ldr	r3, [pc, #172]	; (800086c <HAL_TIM_IC_CaptureCallback+0xc0>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d00a      	beq.n	80007de <HAL_TIM_IC_CaptureCallback+0x32>
		{
			tab[0] = HAL_TIM_ReadCapturedValue(htim2, TIM_CHANNEL_1);
 80007c8:	2100      	movs	r1, #0
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f003 fec4 	bl	8004558 <HAL_TIM_ReadCapturedValue>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4a27      	ldr	r2, [pc, #156]	; (8000870 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80007d4:	6013      	str	r3, [r2, #0]
			first = 0;
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <HAL_TIM_IC_CaptureCallback+0xc0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
 80007dc:	e01d      	b.n	800081a <HAL_TIM_IC_CaptureCallback+0x6e>
		}
		else
		{
			tab[1] = HAL_TIM_ReadCapturedValue(htim2, TIM_CHANNEL_1);
 80007de:	2100      	movs	r1, #0
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f003 feb9 	bl	8004558 <HAL_TIM_ReadCapturedValue>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4a21      	ldr	r2, [pc, #132]	; (8000870 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80007ea:	6053      	str	r3, [r2, #4]
			value = tab[1] - tab[0];
 80007ec:	4b20      	ldr	r3, [pc, #128]	; (8000870 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	4a1f      	ldr	r2, [pc, #124]	; (8000874 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80007f8:	6013      	str	r3, [r2, #0]
			frequency = HAL_RCC_GetPCLK1Freq()/value;
 80007fa:	f002 ff39 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 80007fe:	4602      	mov	r2, r0
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	fbb2 f3f3 	udiv	r3, r2, r3
 8000808:	4a1b      	ldr	r2, [pc, #108]	; (8000878 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800080a:	6013      	str	r3, [r2, #0]
			first = 1;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <HAL_TIM_IC_CaptureCallback+0xc0>)
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(htim2, TIM_CHANNEL_1);
 8000812:	2100      	movs	r1, #0
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f003 fb5d 	bl	8003ed4 <HAL_TIM_IC_Stop_IT>
		}
		if (value>1100)
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f240 424c 	movw	r2, #1100	; 0x44c
 8000822:	4293      	cmp	r3, r2
 8000824:	d912      	bls.n	800084c <HAL_TIM_IC_CaptureCallback+0xa0>
		{
			if (tim1_started == 0)
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	f083 0301 	eor.w	r3, r3, #1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2b00      	cmp	r3, #0
 8000834:	d016      	beq.n	8000864 <HAL_TIM_IC_CaptureCallback+0xb8>
			{
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Base_Start_IT(&htim1);
 800083e:	4810      	ldr	r0, [pc, #64]	; (8000880 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000840:	f003 f936 	bl	8003ab0 <HAL_TIM_Base_Start_IT>
				tim1_started = 1;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
		{
			HAL_TIM_Base_Stop_IT(&htim1);
			tim1_started = 0;
		}
	}
}
 800084a:	e00b      	b.n	8000864 <HAL_TIM_IC_CaptureCallback+0xb8>
		else if (value<1100)
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f240 424b 	movw	r2, #1099	; 0x44b
 8000854:	4293      	cmp	r3, r2
 8000856:	d805      	bhi.n	8000864 <HAL_TIM_IC_CaptureCallback+0xb8>
			HAL_TIM_Base_Stop_IT(&htim1);
 8000858:	4809      	ldr	r0, [pc, #36]	; (8000880 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800085a:	f003 f97d 	bl	8003b58 <HAL_TIM_Base_Stop_IT>
			tim1_started = 0;
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000000 	.word	0x20000000
 8000870:	20000204 	.word	0x20000204
 8000874:	20000200 	.word	0x20000200
 8000878:	20000214 	.word	0x20000214
 800087c:	20000210 	.word	0x20000210
 8000880:	200000e0 	.word	0x200000e0

08000884 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d11c      	bne.n	80008d0 <HAL_TIM_PeriodElapsedCallback+0x4c>
  {
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin , led_state);
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	461a      	mov	r2, r3
 800089e:	2108      	movs	r1, #8
 80008a0:	480f      	ldr	r0, [pc, #60]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80008a2:	f000 ffc9 	bl	8001838 <HAL_GPIO_WritePin>
	  led_state = (led_state == 0) ? 1 : 0;
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	bf14      	ite	ne
 80008b0:	2301      	movne	r3, #1
 80008b2:	2300      	moveq	r3, #0
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	f083 0301 	eor.w	r3, r3, #1
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008c4:	701a      	strb	r2, [r3, #0]
		  cpt++;
 80008c6:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3301      	adds	r3, #1
 80008cc:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80008ce:	6013      	str	r3, [r2, #0]

  }
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40012c00 	.word	0x40012c00
 80008dc:	20000212 	.word	0x20000212
 80008e0:	48000400 	.word	0x48000400
 80008e4:	2000020c 	.word	0x2000020c

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>

080008f2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af04      	add	r7, sp, #16
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	9302      	str	r3, [sp, #8]
 8000910:	2301      	movs	r3, #1
 8000912:	9301      	str	r3, [sp, #4]
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	2301      	movs	r3, #1
 800091a:	2200      	movs	r2, #0
 800091c:	2178      	movs	r1, #120	; 0x78
 800091e:	4803      	ldr	r0, [pc, #12]	; (800092c <ssd1306_WriteCommand+0x2c>)
 8000920:	f001 f832 	bl	8001988 <HAL_I2C_Mem_Write>
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000008c 	.word	0x2000008c

08000930 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af04      	add	r7, sp, #16
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	b29b      	uxth	r3, r3
 800093e:	f04f 32ff 	mov.w	r2, #4294967295
 8000942:	9202      	str	r2, [sp, #8]
 8000944:	9301      	str	r3, [sp, #4]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2301      	movs	r3, #1
 800094c:	2240      	movs	r2, #64	; 0x40
 800094e:	2178      	movs	r1, #120	; 0x78
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <ssd1306_WriteData+0x30>)
 8000952:	f001 f819 	bl	8001988 <HAL_I2C_Mem_Write>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000008c 	.word	0x2000008c

08000964 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000968:	f7ff ffc3 	bl	80008f2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800096c:	2064      	movs	r0, #100	; 0x64
 800096e:	f000 fca3 	bl	80012b8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000972:	2000      	movs	r0, #0
 8000974:	f000 fa28 	bl	8000dc8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000978:	2020      	movs	r0, #32
 800097a:	f7ff ffc1 	bl	8000900 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff ffbe 	bl	8000900 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000984:	20b0      	movs	r0, #176	; 0xb0
 8000986:	f7ff ffbb 	bl	8000900 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800098a:	20c8      	movs	r0, #200	; 0xc8
 800098c:	f7ff ffb8 	bl	8000900 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff ffb5 	bl	8000900 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000996:	2010      	movs	r0, #16
 8000998:	f7ff ffb2 	bl	8000900 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800099c:	2040      	movs	r0, #64	; 0x40
 800099e:	f7ff ffaf 	bl	8000900 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80009a2:	20ff      	movs	r0, #255	; 0xff
 80009a4:	f000 f9fd 	bl	8000da2 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80009a8:	20a1      	movs	r0, #161	; 0xa1
 80009aa:	f7ff ffa9 	bl	8000900 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80009ae:	20a6      	movs	r0, #166	; 0xa6
 80009b0:	f7ff ffa6 	bl	8000900 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80009b4:	20a8      	movs	r0, #168	; 0xa8
 80009b6:	f7ff ffa3 	bl	8000900 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80009ba:	203f      	movs	r0, #63	; 0x3f
 80009bc:	f7ff ffa0 	bl	8000900 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80009c0:	20a4      	movs	r0, #164	; 0xa4
 80009c2:	f7ff ff9d 	bl	8000900 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80009c6:	20d3      	movs	r0, #211	; 0xd3
 80009c8:	f7ff ff9a 	bl	8000900 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80009cc:	2000      	movs	r0, #0
 80009ce:	f7ff ff97 	bl	8000900 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80009d2:	20d5      	movs	r0, #213	; 0xd5
 80009d4:	f7ff ff94 	bl	8000900 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80009d8:	20f0      	movs	r0, #240	; 0xf0
 80009da:	f7ff ff91 	bl	8000900 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80009de:	20d9      	movs	r0, #217	; 0xd9
 80009e0:	f7ff ff8e 	bl	8000900 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80009e4:	2022      	movs	r0, #34	; 0x22
 80009e6:	f7ff ff8b 	bl	8000900 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80009ea:	20da      	movs	r0, #218	; 0xda
 80009ec:	f7ff ff88 	bl	8000900 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80009f0:	2012      	movs	r0, #18
 80009f2:	f7ff ff85 	bl	8000900 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80009f6:	20db      	movs	r0, #219	; 0xdb
 80009f8:	f7ff ff82 	bl	8000900 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80009fc:	2020      	movs	r0, #32
 80009fe:	f7ff ff7f 	bl	8000900 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000a02:	208d      	movs	r0, #141	; 0x8d
 8000a04:	f7ff ff7c 	bl	8000900 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000a08:	2014      	movs	r0, #20
 8000a0a:	f7ff ff79 	bl	8000900 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f000 f9da 	bl	8000dc8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f000 f80f 	bl	8000a38 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000a1a:	f000 f825 	bl	8000a68 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <ssd1306_Init+0xd0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <ssd1306_Init+0xd0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000a2a:	4b02      	ldr	r3, [pc, #8]	; (8000a34 <ssd1306_Init+0xd0>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	711a      	strb	r2, [r3, #4]
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000062c 	.word	0x2000062c

08000a38 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d101      	bne.n	8000a4c <ssd1306_Fill+0x14>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	e000      	b.n	8000a4e <ssd1306_Fill+0x16>
 8000a4c:	23ff      	movs	r3, #255	; 0xff
 8000a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a52:	4619      	mov	r1, r3
 8000a54:	4803      	ldr	r0, [pc, #12]	; (8000a64 <ssd1306_Fill+0x2c>)
 8000a56:	f004 fc73 	bl	8005340 <memset>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000022c 	.word	0x2000022c

08000a68 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	71fb      	strb	r3, [r7, #7]
 8000a72:	e016      	b.n	8000aa2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	3b50      	subs	r3, #80	; 0x50
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ff40 	bl	8000900 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000a80:	2000      	movs	r0, #0
 8000a82:	f7ff ff3d 	bl	8000900 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000a86:	2010      	movs	r0, #16
 8000a88:	f7ff ff3a 	bl	8000900 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	01db      	lsls	r3, r3, #7
 8000a90:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <ssd1306_UpdateScreen+0x4c>)
 8000a92:	4413      	add	r3, r2
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff4a 	bl	8000930 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	71fb      	strb	r3, [r7, #7]
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b07      	cmp	r3, #7
 8000aa6:	d9e5      	bls.n	8000a74 <ssd1306_UpdateScreen+0xc>
    }
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000022c 	.word	0x2000022c

08000ab8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	71bb      	strb	r3, [r7, #6]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db3d      	blt.n	8000b4e <ssd1306_DrawPixel+0x96>
 8000ad2:	79bb      	ldrb	r3, [r7, #6]
 8000ad4:	2b3f      	cmp	r3, #63	; 0x3f
 8000ad6:	d83a      	bhi.n	8000b4e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000ad8:	797b      	ldrb	r3, [r7, #5]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d11a      	bne.n	8000b14 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ade:	79fa      	ldrb	r2, [r7, #7]
 8000ae0:	79bb      	ldrb	r3, [r7, #6]
 8000ae2:	08db      	lsrs	r3, r3, #3
 8000ae4:	b2d8      	uxtb	r0, r3
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	01db      	lsls	r3, r3, #7
 8000aea:	4413      	add	r3, r2
 8000aec:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <ssd1306_DrawPixel+0xa4>)
 8000aee:	5cd3      	ldrb	r3, [r2, r3]
 8000af0:	b25a      	sxtb	r2, r3
 8000af2:	79bb      	ldrb	r3, [r7, #6]
 8000af4:	f003 0307 	and.w	r3, r3, #7
 8000af8:	2101      	movs	r1, #1
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	b25b      	sxtb	r3, r3
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b259      	sxtb	r1, r3
 8000b04:	79fa      	ldrb	r2, [r7, #7]
 8000b06:	4603      	mov	r3, r0
 8000b08:	01db      	lsls	r3, r3, #7
 8000b0a:	4413      	add	r3, r2
 8000b0c:	b2c9      	uxtb	r1, r1
 8000b0e:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <ssd1306_DrawPixel+0xa4>)
 8000b10:	54d1      	strb	r1, [r2, r3]
 8000b12:	e01d      	b.n	8000b50 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b14:	79fa      	ldrb	r2, [r7, #7]
 8000b16:	79bb      	ldrb	r3, [r7, #6]
 8000b18:	08db      	lsrs	r3, r3, #3
 8000b1a:	b2d8      	uxtb	r0, r3
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	01db      	lsls	r3, r3, #7
 8000b20:	4413      	add	r3, r2
 8000b22:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <ssd1306_DrawPixel+0xa4>)
 8000b24:	5cd3      	ldrb	r3, [r2, r3]
 8000b26:	b25a      	sxtb	r2, r3
 8000b28:	79bb      	ldrb	r3, [r7, #6]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fa01 f303 	lsl.w	r3, r1, r3
 8000b34:	b25b      	sxtb	r3, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	b259      	sxtb	r1, r3
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	4603      	mov	r3, r0
 8000b42:	01db      	lsls	r3, r3, #7
 8000b44:	4413      	add	r3, r2
 8000b46:	b2c9      	uxtb	r1, r1
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <ssd1306_DrawPixel+0xa4>)
 8000b4a:	54d1      	strb	r1, [r2, r3]
 8000b4c:	e000      	b.n	8000b50 <ssd1306_DrawPixel+0x98>
        return;
 8000b4e:	bf00      	nop
    }
}
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	2000022c 	.word	0x2000022c

08000b60 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4604      	mov	r4, r0
 8000b68:	1d38      	adds	r0, r7, #4
 8000b6a:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4623      	mov	r3, r4
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	4613      	mov	r3, r2
 8000b76:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	2b1f      	cmp	r3, #31
 8000b7c:	d902      	bls.n	8000b84 <ssd1306_WriteChar+0x24>
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	2b7e      	cmp	r3, #126	; 0x7e
 8000b82:	d901      	bls.n	8000b88 <ssd1306_WriteChar+0x28>
        return 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	e06d      	b.n	8000c64 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000b88:	4b38      	ldr	r3, [pc, #224]	; (8000c6c <ssd1306_WriteChar+0x10c>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	793b      	ldrb	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	2b80      	cmp	r3, #128	; 0x80
 8000b94:	dc06      	bgt.n	8000ba4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000b96:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <ssd1306_WriteChar+0x10c>)
 8000b98:	885b      	ldrh	r3, [r3, #2]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	797b      	ldrb	r3, [r7, #5]
 8000b9e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000ba0:	2b40      	cmp	r3, #64	; 0x40
 8000ba2:	dd01      	ble.n	8000ba8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e05d      	b.n	8000c64 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
 8000bac:	e04c      	b.n	8000c48 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	3b20      	subs	r3, #32
 8000bb4:	7979      	ldrb	r1, [r7, #5]
 8000bb6:	fb01 f303 	mul.w	r3, r1, r3
 8000bba:	4619      	mov	r1, r3
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	440b      	add	r3, r1
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	4413      	add	r3, r2
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	e034      	b.n	8000c38 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d012      	beq.n	8000c04 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <ssd1306_WriteChar+0x10c>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4413      	add	r3, r2
 8000bea:	b2d8      	uxtb	r0, r3
 8000bec:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <ssd1306_WriteChar+0x10c>)
 8000bee:	885b      	ldrh	r3, [r3, #2]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	7bba      	ldrb	r2, [r7, #14]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f7ff ff5b 	bl	8000ab8 <ssd1306_DrawPixel>
 8000c02:	e016      	b.n	8000c32 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <ssd1306_WriteChar+0x10c>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	4413      	add	r3, r2
 8000c10:	b2d8      	uxtb	r0, r3
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <ssd1306_WriteChar+0x10c>)
 8000c14:	885b      	ldrh	r3, [r3, #2]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b2d9      	uxtb	r1, r3
 8000c20:	7bbb      	ldrb	r3, [r7, #14]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	bf0c      	ite	eq
 8000c26:	2301      	moveq	r3, #1
 8000c28:	2300      	movne	r3, #0
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	f7ff ff43 	bl	8000ab8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	3301      	adds	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
 8000c38:	793b      	ldrb	r3, [r7, #4]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d3c5      	bcc.n	8000bce <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3301      	adds	r3, #1
 8000c46:	61fb      	str	r3, [r7, #28]
 8000c48:	797b      	ldrb	r3, [r7, #5]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d3ad      	bcc.n	8000bae <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <ssd1306_WriteChar+0x10c>)
 8000c54:	881a      	ldrh	r2, [r3, #0]
 8000c56:	793b      	ldrb	r3, [r7, #4]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <ssd1306_WriteChar+0x10c>)
 8000c60:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3724      	adds	r7, #36	; 0x24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd90      	pop	{r4, r7, pc}
 8000c6c:	2000062c 	.word	0x2000062c

08000c70 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	1d38      	adds	r0, r7, #4
 8000c7a:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c7e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000c80:	e012      	b.n	8000ca8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	7818      	ldrb	r0, [r3, #0]
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	1d3a      	adds	r2, r7, #4
 8000c8a:	ca06      	ldmia	r2, {r1, r2}
 8000c8c:	f7ff ff68 	bl	8000b60 <ssd1306_WriteChar>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d002      	beq.n	8000ca2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	e008      	b.n	8000cb4 <ssd1306_WriteString+0x44>
        }
        str++;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1e8      	bne.n	8000c82 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	460a      	mov	r2, r1
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <ssd1306_SetCursor+0x2c>)
 8000cd2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000cd4:	79bb      	ldrb	r3, [r7, #6]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <ssd1306_SetCursor+0x2c>)
 8000cda:	805a      	strh	r2, [r3, #2]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	2000062c 	.word	0x2000062c

08000cec <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	603a      	str	r2, [r7, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	71bb      	strb	r3, [r7, #6]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000d02:	797b      	ldrb	r3, [r7, #5]
 8000d04:	3307      	adds	r3, #7
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	da00      	bge.n	8000d0c <ssd1306_DrawBitmap+0x20>
 8000d0a:	3307      	adds	r3, #7
 8000d0c:	10db      	asrs	r3, r3, #3
 8000d0e:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db3e      	blt.n	8000d9a <ssd1306_DrawBitmap+0xae>
 8000d1c:	79bb      	ldrb	r3, [r7, #6]
 8000d1e:	2b3f      	cmp	r3, #63	; 0x3f
 8000d20:	d83b      	bhi.n	8000d9a <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000d22:	2300      	movs	r3, #0
 8000d24:	73bb      	strb	r3, [r7, #14]
 8000d26:	e033      	b.n	8000d90 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8000d28:	2300      	movs	r3, #0
 8000d2a:	737b      	strb	r3, [r7, #13]
 8000d2c:	e026      	b.n	8000d7c <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8000d2e:	7b7b      	ldrb	r3, [r7, #13]
 8000d30:	f003 0307 	and.w	r3, r3, #7
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	e00d      	b.n	8000d5c <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000d40:	7bbb      	ldrb	r3, [r7, #14]
 8000d42:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000d46:	fb02 f303 	mul.w	r3, r2, r3
 8000d4a:	7b7a      	ldrb	r2, [r7, #13]
 8000d4c:	08d2      	lsrs	r2, r2, #3
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	4413      	add	r3, r2
 8000d52:	461a      	mov	r2, r3
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8000d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	da08      	bge.n	8000d76 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8000d64:	79fa      	ldrb	r2, [r7, #7]
 8000d66:	7b7b      	ldrb	r3, [r7, #13]
 8000d68:	4413      	add	r3, r2
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	7f3a      	ldrb	r2, [r7, #28]
 8000d6e:	79b9      	ldrb	r1, [r7, #6]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fea1 	bl	8000ab8 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000d76:	7b7b      	ldrb	r3, [r7, #13]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	737b      	strb	r3, [r7, #13]
 8000d7c:	7b7a      	ldrb	r2, [r7, #13]
 8000d7e:	797b      	ldrb	r3, [r7, #5]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d3d4      	bcc.n	8000d2e <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000d84:	7bbb      	ldrb	r3, [r7, #14]
 8000d86:	3301      	adds	r3, #1
 8000d88:	73bb      	strb	r3, [r7, #14]
 8000d8a:	79bb      	ldrb	r3, [r7, #6]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	71bb      	strb	r3, [r7, #6]
 8000d90:	7bba      	ldrb	r2, [r7, #14]
 8000d92:	7e3b      	ldrb	r3, [r7, #24]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d3c7      	bcc.n	8000d28 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8000d98:	e000      	b.n	8000d9c <ssd1306_DrawBitmap+0xb0>
        return;
 8000d9a:	bf00      	nop
}
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b084      	sub	sp, #16
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000dac:	2381      	movs	r3, #129	; 0x81
 8000dae:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fda4 	bl	8000900 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fda0 	bl	8000900 <ssd1306_WriteCommand>
}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d005      	beq.n	8000de4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000dd8:	23af      	movs	r3, #175	; 0xaf
 8000dda:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <ssd1306_SetDisplayOn+0x38>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	715a      	strb	r2, [r3, #5]
 8000de2:	e004      	b.n	8000dee <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000de4:	23ae      	movs	r3, #174	; 0xae
 8000de6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <ssd1306_SetDisplayOn+0x38>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fd85 	bl	8000900 <ssd1306_WriteCommand>
}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000062c 	.word	0x2000062c

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_MspInit+0x44>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_MspInit+0x44>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6193      	str	r3, [r2, #24]
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_MspInit+0x44>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_MspInit+0x44>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_MspInit+0x44>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	61d3      	str	r3, [r2, #28]
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_MspInit+0x44>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000

08000e4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <HAL_I2C_MspInit+0x7c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d127      	bne.n	8000ebe <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <HAL_I2C_MspInit+0x80>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	4a16      	ldr	r2, [pc, #88]	; (8000ecc <HAL_I2C_MspInit+0x80>)
 8000e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e78:	6153      	str	r3, [r2, #20]
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_I2C_MspInit+0x80>)
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e86:	23c0      	movs	r3, #192	; 0xc0
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8a:	2312      	movs	r3, #18
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e96:	2304      	movs	r3, #4
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480b      	ldr	r0, [pc, #44]	; (8000ed0 <HAL_I2C_MspInit+0x84>)
 8000ea2:	f000 fb3f 	bl	8001524 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_I2C_MspInit+0x80>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_I2C_MspInit+0x80>)
 8000eac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_I2C_MspInit+0x80>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	48000400 	.word	0x48000400

08000ed4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a34      	ldr	r2, [pc, #208]	; (8000fc4 <HAL_TIM_Base_MspInit+0xf0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12c      	bne.n	8000f50 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ef6:	4b34      	ldr	r3, [pc, #208]	; (8000fc8 <HAL_TIM_Base_MspInit+0xf4>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4a33      	ldr	r2, [pc, #204]	; (8000fc8 <HAL_TIM_Base_MspInit+0xf4>)
 8000efc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f00:	6193      	str	r3, [r2, #24]
 8000f02:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <HAL_TIM_Base_MspInit+0xf4>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	2018      	movs	r0, #24
 8000f14:	f000 facf 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000f18:	2018      	movs	r0, #24
 8000f1a:	f000 fae8 	bl	80014ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2019      	movs	r0, #25
 8000f24:	f000 fac7 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f28:	2019      	movs	r0, #25
 8000f2a:	f000 fae0 	bl	80014ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	201a      	movs	r0, #26
 8000f34:	f000 fabf 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000f38:	201a      	movs	r0, #26
 8000f3a:	f000 fad8 	bl	80014ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	201b      	movs	r0, #27
 8000f44:	f000 fab7 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000f48:	201b      	movs	r0, #27
 8000f4a:	f000 fad0 	bl	80014ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f4e:	e035      	b.n	8000fbc <HAL_TIM_Base_MspInit+0xe8>
  else if(htim_base->Instance==TIM2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f58:	d130      	bne.n	8000fbc <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <HAL_TIM_Base_MspInit+0xf4>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a1a      	ldr	r2, [pc, #104]	; (8000fc8 <HAL_TIM_Base_MspInit+0xf4>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <HAL_TIM_Base_MspInit+0xf4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_TIM_Base_MspInit+0xf4>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <HAL_TIM_Base_MspInit+0xf4>)
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_TIM_Base_MspInit+0xf4>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa8:	f000 fabc 	bl	8001524 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	201c      	movs	r0, #28
 8000fb2:	f000 fa80 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fb6:	201c      	movs	r0, #28
 8000fb8:	f000 fa99 	bl	80014ee <HAL_NVIC_EnableIRQ>
}
 8000fbc:	bf00      	nop
 8000fbe:	3728      	adds	r7, #40	; 0x28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40012c00 	.word	0x40012c00
 8000fc8:	40021000 	.word	0x40021000

08000fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a17      	ldr	r2, [pc, #92]	; (8001048 <HAL_UART_MspInit+0x7c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d128      	bne.n	8001040 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_UART_MspInit+0x80>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	4a16      	ldr	r2, [pc, #88]	; (800104c <HAL_UART_MspInit+0x80>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	61d3      	str	r3, [r2, #28]
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_UART_MspInit+0x80>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_UART_MspInit+0x80>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_UART_MspInit+0x80>)
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	6153      	str	r3, [r2, #20]
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_UART_MspInit+0x80>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800101e:	230c      	movs	r3, #12
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800102e:	2307      	movs	r3, #7
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103c:	f000 fa72 	bl	8001524 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	3728      	adds	r7, #40	; 0x28
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40004400 	.word	0x40004400
 800104c:	40021000 	.word	0x40021000

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001054:	e7fe      	b.n	8001054 <NMI_Handler+0x4>

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109c:	f000 f8ec 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80010aa:	f002 ffd1 	bl	8004050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200000e0 	.word	0x200000e0

080010b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80010be:	f002 ffc7 	bl	8004050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200000e0 	.word	0x200000e0

080010cc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80010d2:	f002 ffbd 	bl	8004050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200000e0 	.word	0x200000e0

080010e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <TIM1_CC_IRQHandler+0x10>)
 80010e6:	f002 ffb3 	bl	8004050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200000e0 	.word	0x200000e0

080010f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <TIM2_IRQHandler+0x10>)
 80010fa:	f002 ffa9 	bl	8004050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000012c 	.word	0x2000012c

08001108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001110:	4a14      	ldr	r2, [pc, #80]	; (8001164 <_sbrk+0x5c>)
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <_sbrk+0x60>)
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <_sbrk+0x64>)
 8001126:	4a12      	ldr	r2, [pc, #72]	; (8001170 <_sbrk+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	429a      	cmp	r2, r3
 8001136:	d207      	bcs.n	8001148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001138:	f004 f90a 	bl	8005350 <__errno>
 800113c:	4603      	mov	r3, r0
 800113e:	220c      	movs	r2, #12
 8001140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e009      	b.n	800115c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <_sbrk+0x64>)
 8001158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115a:	68fb      	ldr	r3, [r7, #12]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20004000 	.word	0x20004000
 8001168:	00000400 	.word	0x00000400
 800116c:	20000634 	.word	0x20000634
 8001170:	20000788 	.word	0x20000788

08001174 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <SystemInit+0x20>)
 800117a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <SystemInit+0x20>)
 8001180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800119c:	f7ff ffea 	bl	8001174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a0:	480c      	ldr	r0, [pc, #48]	; (80011d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011a2:	490d      	ldr	r1, [pc, #52]	; (80011d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a4:	4a0d      	ldr	r2, [pc, #52]	; (80011dc <LoopForever+0xe>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b8:	4c0a      	ldr	r4, [pc, #40]	; (80011e4 <LoopForever+0x16>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011c6:	f004 f8c9 	bl	800535c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ca:	f7ff f881 	bl	80002d0 <main>

080011ce <LoopForever>:

LoopForever:
    b LoopForever
 80011ce:	e7fe      	b.n	80011ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011d0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011dc:	08007970 	.word	0x08007970
  ldr r2, =_sbss
 80011e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011e4:	20000784 	.word	0x20000784

080011e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC1_IRQHandler>
	...

080011ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <HAL_Init+0x28>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <HAL_Init+0x28>)
 80011f6:	f043 0310 	orr.w	r3, r3, #16
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fc:	2003      	movs	r0, #3
 80011fe:	f000 f94f 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001202:	200f      	movs	r0, #15
 8001204:	f000 f808 	bl	8001218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001208:	f7ff fdfc 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40022000 	.word	0x40022000

08001218 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x54>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_InitTick+0x58>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f967 	bl	800150a <HAL_SYSTICK_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e00e      	b.n	8001264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	d80a      	bhi.n	8001262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124c:	2200      	movs	r2, #0
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f000 f92f 	bl	80014b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001258:	4a06      	ldr	r2, [pc, #24]	; (8001274 <HAL_InitTick+0x5c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000014 	.word	0x20000014
 8001270:	2000001c 	.word	0x2000001c
 8001274:	20000018 	.word	0x20000018

08001278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	2000001c 	.word	0x2000001c
 800129c:	20000638 	.word	0x20000638

080012a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000638 	.word	0x20000638

080012b8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff ffee 	bl	80012a0 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012de:	bf00      	nop
 80012e0:	f7ff ffde 	bl	80012a0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000001c 	.word	0x2000001c

08001300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800132c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001332:	4a04      	ldr	r2, [pc, #16]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	60d3      	str	r3, [r2, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0b      	blt.n	800138e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	4907      	ldr	r1, [pc, #28]	; (800139c <__NVIC_EnableIRQ+0x38>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	2001      	movs	r0, #1
 8001386:	fa00 f202 	lsl.w	r2, r0, r2
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	; (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
         );
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800146c:	d301      	bcc.n	8001472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146e:	2301      	movs	r3, #1
 8001470:	e00f      	b.n	8001492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <SysTick_Config+0x40>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147a:	210f      	movs	r1, #15
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f7ff ff8e 	bl	80013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <SysTick_Config+0x40>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148a:	4b04      	ldr	r3, [pc, #16]	; (800149c <SysTick_Config+0x40>)
 800148c:	2207      	movs	r2, #7
 800148e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	e000e010 	.word	0xe000e010

080014a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff29 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c8:	f7ff ff3e 	bl	8001348 <__NVIC_GetPriorityGrouping>
 80014cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff ff8e 	bl	80013f4 <NVIC_EncodePriority>
 80014d8:	4602      	mov	r2, r0
 80014da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff5d 	bl	80013a0 <__NVIC_SetPriority>
}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff31 	bl	8001364 <__NVIC_EnableIRQ>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ffa2 	bl	800145c <SysTick_Config>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001524:	b480      	push	{r7}
 8001526:	b087      	sub	sp, #28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001532:	e14e      	b.n	80017d2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2101      	movs	r1, #1
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	4013      	ands	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 8140 	beq.w	80017cc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b01      	cmp	r3, #1
 8001556:	d005      	beq.n	8001564 <HAL_GPIO_Init+0x40>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d130      	bne.n	80015c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159a:	2201      	movs	r2, #1
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	f003 0201 	and.w	r2, r3, #1
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d017      	beq.n	8001602 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	2203      	movs	r2, #3
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d123      	bne.n	8001656 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	08da      	lsrs	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3208      	adds	r2, #8
 8001616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	691a      	ldr	r2, [r3, #16]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	6939      	ldr	r1, [r7, #16]
 8001652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	2203      	movs	r2, #3
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0203 	and.w	r2, r3, #3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 809a 	beq.w	80017cc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001698:	4b55      	ldr	r3, [pc, #340]	; (80017f0 <HAL_GPIO_Init+0x2cc>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a54      	ldr	r2, [pc, #336]	; (80017f0 <HAL_GPIO_Init+0x2cc>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b52      	ldr	r3, [pc, #328]	; (80017f0 <HAL_GPIO_Init+0x2cc>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016b0:	4a50      	ldr	r2, [pc, #320]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	089b      	lsrs	r3, r3, #2
 80016b6:	3302      	adds	r3, #2
 80016b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	220f      	movs	r2, #15
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016da:	d013      	beq.n	8001704 <HAL_GPIO_Init+0x1e0>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a46      	ldr	r2, [pc, #280]	; (80017f8 <HAL_GPIO_Init+0x2d4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d00d      	beq.n	8001700 <HAL_GPIO_Init+0x1dc>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a45      	ldr	r2, [pc, #276]	; (80017fc <HAL_GPIO_Init+0x2d8>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d007      	beq.n	80016fc <HAL_GPIO_Init+0x1d8>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a44      	ldr	r2, [pc, #272]	; (8001800 <HAL_GPIO_Init+0x2dc>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d101      	bne.n	80016f8 <HAL_GPIO_Init+0x1d4>
 80016f4:	2303      	movs	r3, #3
 80016f6:	e006      	b.n	8001706 <HAL_GPIO_Init+0x1e2>
 80016f8:	2305      	movs	r3, #5
 80016fa:	e004      	b.n	8001706 <HAL_GPIO_Init+0x1e2>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e002      	b.n	8001706 <HAL_GPIO_Init+0x1e2>
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <HAL_GPIO_Init+0x1e2>
 8001704:	2300      	movs	r3, #0
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	f002 0203 	and.w	r2, r2, #3
 800170c:	0092      	lsls	r2, r2, #2
 800170e:	4093      	lsls	r3, r2
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001716:	4937      	ldr	r1, [pc, #220]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	3302      	adds	r3, #2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001724:	4b37      	ldr	r3, [pc, #220]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001748:	4a2e      	ldr	r2, [pc, #184]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800174e:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001772:	4a24      	ldr	r2, [pc, #144]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001778:	4b22      	ldr	r3, [pc, #136]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017c6:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3301      	adds	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	fa22 f303 	lsr.w	r3, r2, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f47f aea9 	bne.w	8001534 <HAL_GPIO_Init+0x10>
  }
}
 80017e2:	bf00      	nop
 80017e4:	bf00      	nop
 80017e6:	371c      	adds	r7, #28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010000 	.word	0x40010000
 80017f8:	48000400 	.word	0x48000400
 80017fc:	48000800 	.word	0x48000800
 8001800:	48000c00 	.word	0x48000c00
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	887b      	ldrh	r3, [r7, #2]
 800181a:	4013      	ands	r3, r2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
 8001824:	e001      	b.n	800182a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800182a:	7bfb      	ldrb	r3, [r7, #15]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	807b      	strh	r3, [r7, #2]
 8001844:	4613      	mov	r3, r2
 8001846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001848:	787b      	ldrb	r3, [r7, #1]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800184e:	887a      	ldrh	r2, [r7, #2]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001854:	e002      	b.n	800185c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001856:	887a      	ldrh	r2, [r7, #2]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e081      	b.n	800197e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d106      	bne.n	8001894 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff fadc 	bl	8000e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2224      	movs	r2, #36	; 0x24
 8001898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0201 	bic.w	r2, r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d107      	bne.n	80018e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	e006      	b.n	80018f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80018ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d104      	bne.n	8001902 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001900:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001914:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001924:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69d9      	ldr	r1, [r3, #28]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1a      	ldr	r2, [r3, #32]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0201 	orr.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2220      	movs	r2, #32
 800196a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af02      	add	r7, sp, #8
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	4608      	mov	r0, r1
 8001992:	4611      	mov	r1, r2
 8001994:	461a      	mov	r2, r3
 8001996:	4603      	mov	r3, r0
 8001998:	817b      	strh	r3, [r7, #10]
 800199a:	460b      	mov	r3, r1
 800199c:	813b      	strh	r3, [r7, #8]
 800199e:	4613      	mov	r3, r2
 80019a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b20      	cmp	r3, #32
 80019ac:	f040 80f9 	bne.w	8001ba2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <HAL_I2C_Mem_Write+0x34>
 80019b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d105      	bne.n	80019c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0ed      	b.n	8001ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_I2C_Mem_Write+0x4e>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e0e6      	b.n	8001ba4 <HAL_I2C_Mem_Write+0x21c>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019de:	f7ff fc5f 	bl	80012a0 <HAL_GetTick>
 80019e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2319      	movs	r3, #25
 80019ea:	2201      	movs	r2, #1
 80019ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 f955 	bl	8001ca0 <I2C_WaitOnFlagUntilTimeout>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0d1      	b.n	8001ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2221      	movs	r2, #33	; 0x21
 8001a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2240      	movs	r2, #64	; 0x40
 8001a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6a3a      	ldr	r2, [r7, #32]
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a28:	88f8      	ldrh	r0, [r7, #6]
 8001a2a:	893a      	ldrh	r2, [r7, #8]
 8001a2c:	8979      	ldrh	r1, [r7, #10]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	4603      	mov	r3, r0
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 f8b9 	bl	8001bb0 <I2C_RequestMemoryWrite>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0a9      	b.n	8001ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	2bff      	cmp	r3, #255	; 0xff
 8001a58:	d90e      	bls.n	8001a78 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	22ff      	movs	r2, #255	; 0xff
 8001a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	8979      	ldrh	r1, [r7, #10]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 facf 	bl	8002014 <I2C_TransferConfig>
 8001a76:	e00f      	b.n	8001a98 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	8979      	ldrh	r1, [r7, #10]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 fabe 	bl	8002014 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f000 f94e 	bl	8001d3e <I2C_WaitOnTXISFlagUntilTimeout>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e07b      	b.n	8001ba4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	781a      	ldrb	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d034      	beq.n	8001b50 <HAL_I2C_Mem_Write+0x1c8>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d130      	bne.n	8001b50 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af4:	2200      	movs	r2, #0
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 f8d1 	bl	8001ca0 <I2C_WaitOnFlagUntilTimeout>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e04d      	b.n	8001ba4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	2bff      	cmp	r3, #255	; 0xff
 8001b10:	d90e      	bls.n	8001b30 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	22ff      	movs	r2, #255	; 0xff
 8001b16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	8979      	ldrh	r1, [r7, #10]
 8001b20:	2300      	movs	r3, #0
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 fa73 	bl	8002014 <I2C_TransferConfig>
 8001b2e:	e00f      	b.n	8001b50 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	8979      	ldrh	r1, [r7, #10]
 8001b42:	2300      	movs	r3, #0
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 fa62 	bl	8002014 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d19e      	bne.n	8001a98 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 f934 	bl	8001dcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e01a      	b.n	8001ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2220      	movs	r2, #32
 8001b74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6859      	ldr	r1, [r3, #4]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_I2C_Mem_Write+0x224>)
 8001b82:	400b      	ands	r3, r1
 8001b84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001ba2:	2302      	movs	r3, #2
  }
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	fe00e800 	.word	0xfe00e800

08001bb0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	4608      	mov	r0, r1
 8001bba:	4611      	mov	r1, r2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	817b      	strh	r3, [r7, #10]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	813b      	strh	r3, [r7, #8]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	8979      	ldrh	r1, [r7, #10]
 8001bd0:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <I2C_RequestMemoryWrite+0xa4>)
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 fa1b 	bl	8002014 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	69b9      	ldr	r1, [r7, #24]
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 f8ab 	bl	8001d3e <I2C_WaitOnTXISFlagUntilTimeout>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e02c      	b.n	8001c4c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bf8:	893b      	ldrh	r3, [r7, #8]
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28
 8001c02:	e015      	b.n	8001c30 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c04:	893b      	ldrh	r3, [r7, #8]
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	69b9      	ldr	r1, [r7, #24]
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 f891 	bl	8001d3e <I2C_WaitOnTXISFlagUntilTimeout>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e012      	b.n	8001c4c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c26:	893b      	ldrh	r3, [r7, #8]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	2200      	movs	r2, #0
 8001c38:	2180      	movs	r1, #128	; 0x80
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f830 	bl	8001ca0 <I2C_WaitOnFlagUntilTimeout>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	80002000 	.word	0x80002000

08001c58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d103      	bne.n	8001c76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2200      	movs	r2, #0
 8001c74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d007      	beq.n	8001c94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699a      	ldr	r2, [r3, #24]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	619a      	str	r2, [r3, #24]
  }
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	4613      	mov	r3, r2
 8001cae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cb0:	e031      	b.n	8001d16 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	d02d      	beq.n	8001d16 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cba:	f7ff faf1 	bl	80012a0 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d302      	bcc.n	8001cd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d122      	bne.n	8001d16 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699a      	ldr	r2, [r3, #24]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	bf0c      	ite	eq
 8001ce0:	2301      	moveq	r3, #1
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d113      	bne.n	8001d16 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	f043 0220 	orr.w	r2, r3, #32
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00f      	b.n	8001d36 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699a      	ldr	r2, [r3, #24]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	bf0c      	ite	eq
 8001d26:	2301      	moveq	r3, #1
 8001d28:	2300      	movne	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d0be      	beq.n	8001cb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d4a:	e033      	b.n	8001db4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	68b9      	ldr	r1, [r7, #8]
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 f87f 	bl	8001e54 <I2C_IsErrorOccurred>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e031      	b.n	8001dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d66:	d025      	beq.n	8001db4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d68:	f7ff fa9a 	bl	80012a0 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d302      	bcc.n	8001d7e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d11a      	bne.n	8001db4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d013      	beq.n	8001db4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d90:	f043 0220 	orr.w	r2, r3, #32
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e007      	b.n	8001dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d1c4      	bne.n	8001d4c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dd8:	e02f      	b.n	8001e3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 f838 	bl	8001e54 <I2C_IsErrorOccurred>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e02d      	b.n	8001e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dee:	f7ff fa57 	bl	80012a0 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d302      	bcc.n	8001e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d11a      	bne.n	8001e3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	d013      	beq.n	8001e3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f043 0220 	orr.w	r2, r3, #32
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2220      	movs	r2, #32
 8001e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e007      	b.n	8001e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b20      	cmp	r3, #32
 8001e46:	d1c8      	bne.n	8001dda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d068      	beq.n	8001f52 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2210      	movs	r2, #16
 8001e86:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e88:	e049      	b.n	8001f1e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e90:	d045      	beq.n	8001f1e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e92:	f7ff fa05 	bl	80012a0 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	68ba      	ldr	r2, [r7, #8]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d302      	bcc.n	8001ea8 <I2C_IsErrorOccurred+0x54>
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d13a      	bne.n	8001f1e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001eba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eca:	d121      	bne.n	8001f10 <I2C_IsErrorOccurred+0xbc>
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ed2:	d01d      	beq.n	8001f10 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001ed4:	7cfb      	ldrb	r3, [r7, #19]
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d01a      	beq.n	8001f10 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ee8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001eea:	f7ff f9d9 	bl	80012a0 <HAL_GetTick>
 8001eee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ef0:	e00e      	b.n	8001f10 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ef2:	f7ff f9d5 	bl	80012a0 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b19      	cmp	r3, #25
 8001efe:	d907      	bls.n	8001f10 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	f043 0320 	orr.w	r3, r3, #32
 8001f06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001f0e:	e006      	b.n	8001f1e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f003 0320 	and.w	r3, r3, #32
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d1e9      	bne.n	8001ef2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0320 	and.w	r3, r3, #32
 8001f28:	2b20      	cmp	r3, #32
 8001f2a:	d003      	beq.n	8001f34 <I2C_IsErrorOccurred+0xe0>
 8001f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0aa      	beq.n	8001e8a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d103      	bne.n	8001f44 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2220      	movs	r2, #32
 8001f42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00b      	beq.n	8001f7c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00b      	beq.n	8001f9e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	f043 0308 	orr.w	r3, r3, #8
 8001f8c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00b      	beq.n	8001fc0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	f043 0302 	orr.w	r3, r3, #2
 8001fae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01c      	beq.n	8002002 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f7ff fe45 	bl	8001c58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6859      	ldr	r1, [r3, #4]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <I2C_IsErrorOccurred+0x1bc>)
 8001fda:	400b      	ands	r3, r1
 8001fdc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002006:	4618      	mov	r0, r3
 8002008:	3728      	adds	r7, #40	; 0x28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	fe00e800 	.word	0xfe00e800

08002014 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	460b      	mov	r3, r1
 8002020:	817b      	strh	r3, [r7, #10]
 8002022:	4613      	mov	r3, r2
 8002024:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002026:	897b      	ldrh	r3, [r7, #10]
 8002028:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800202c:	7a7b      	ldrb	r3, [r7, #9]
 800202e:	041b      	lsls	r3, r3, #16
 8002030:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002034:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	4313      	orrs	r3, r2
 800203e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002042:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	0d5b      	lsrs	r3, r3, #21
 800204e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <I2C_TransferConfig+0x60>)
 8002054:	430b      	orrs	r3, r1
 8002056:	43db      	mvns	r3, r3
 8002058:	ea02 0103 	and.w	r1, r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	430a      	orrs	r2, r1
 8002064:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002066:	bf00      	nop
 8002068:	371c      	adds	r7, #28
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	03ff63ff 	.word	0x03ff63ff

08002078 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b20      	cmp	r3, #32
 800208c:	d138      	bne.n	8002100 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002098:	2302      	movs	r3, #2
 800209a:	e032      	b.n	8002102 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2224      	movs	r2, #36	; 0x24
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0201 	bic.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6819      	ldr	r1, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	e000      	b.n	8002102 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002100:	2302      	movs	r3, #2
  }
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800210e:	b480      	push	{r7}
 8002110:	b085      	sub	sp, #20
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b20      	cmp	r3, #32
 8002122:	d139      	bne.n	8002198 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800212e:	2302      	movs	r3, #2
 8002130:	e033      	b.n	800219a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2224      	movs	r2, #36	; 0x24
 800213e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002160:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4313      	orrs	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0201 	orr.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	e000      	b.n	800219a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002198:	2302      	movs	r3, #2
  }
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021b8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f001 b823 	b.w	8003214 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 817d 	beq.w	80024de <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021e4:	4bbc      	ldr	r3, [pc, #752]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d00c      	beq.n	800220a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021f0:	4bb9      	ldr	r3, [pc, #740]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d15c      	bne.n	80022b6 <HAL_RCC_OscConfig+0x10e>
 80021fc:	4bb6      	ldr	r3, [pc, #728]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002208:	d155      	bne.n	80022b6 <HAL_RCC_OscConfig+0x10e>
 800220a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800220e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800221e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d102      	bne.n	800223c <HAL_RCC_OscConfig+0x94>
 8002236:	4ba8      	ldr	r3, [pc, #672]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	e015      	b.n	8002268 <HAL_RCC_OscConfig+0xc0>
 800223c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002240:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002250:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002254:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002258:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800225c:	fa93 f3a3 	rbit	r3, r3
 8002260:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002264:	4b9c      	ldr	r3, [pc, #624]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800226c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002270:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002274:	fa92 f2a2 	rbit	r2, r2
 8002278:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800227c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002280:	fab2 f282 	clz	r2, r2
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	f042 0220 	orr.w	r2, r2, #32
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	f002 021f 	and.w	r2, r2, #31
 8002290:	2101      	movs	r1, #1
 8002292:	fa01 f202 	lsl.w	r2, r1, r2
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 811f 	beq.w	80024dc <HAL_RCC_OscConfig+0x334>
 800229e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f040 8116 	bne.w	80024dc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	f000 bfaf 	b.w	8003214 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c6:	d106      	bne.n	80022d6 <HAL_RCC_OscConfig+0x12e>
 80022c8:	4b83      	ldr	r3, [pc, #524]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a82      	ldr	r2, [pc, #520]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80022ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	e036      	b.n	8002344 <HAL_RCC_OscConfig+0x19c>
 80022d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x158>
 80022e6:	4b7c      	ldr	r3, [pc, #496]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a7b      	ldr	r2, [pc, #492]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80022ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b79      	ldr	r3, [pc, #484]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a78      	ldr	r2, [pc, #480]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80022f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e021      	b.n	8002344 <HAL_RCC_OscConfig+0x19c>
 8002300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002304:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0x184>
 8002312:	4b71      	ldr	r3, [pc, #452]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a70      	ldr	r2, [pc, #448]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 8002318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b6e      	ldr	r3, [pc, #440]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a6d      	ldr	r2, [pc, #436]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 8002324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e00b      	b.n	8002344 <HAL_RCC_OscConfig+0x19c>
 800232c:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a69      	ldr	r2, [pc, #420]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 8002332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b67      	ldr	r3, [pc, #412]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a66      	ldr	r2, [pc, #408]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 800233e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002342:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002344:	4b64      	ldr	r3, [pc, #400]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	f023 020f 	bic.w	r2, r3, #15
 800234c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002350:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	495f      	ldr	r1, [pc, #380]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 800235a:	4313      	orrs	r3, r2
 800235c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800235e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002362:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d059      	beq.n	8002422 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7fe ff97 	bl	80012a0 <HAL_GetTick>
 8002372:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	e00a      	b.n	800238e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002378:	f7fe ff92 	bl	80012a0 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b64      	cmp	r3, #100	; 0x64
 8002386:	d902      	bls.n	800238e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	f000 bf43 	b.w	8003214 <HAL_RCC_OscConfig+0x106c>
 800238e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002392:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80023a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d102      	bne.n	80023c0 <HAL_RCC_OscConfig+0x218>
 80023ba:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	e015      	b.n	80023ec <HAL_RCC_OscConfig+0x244>
 80023c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80023d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023d8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80023dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80023e8:	4b3b      	ldr	r3, [pc, #236]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023f0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80023f4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80023f8:	fa92 f2a2 	rbit	r2, r2
 80023fc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002400:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002404:	fab2 f282 	clz	r2, r2
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	f042 0220 	orr.w	r2, r2, #32
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	f002 021f 	and.w	r2, r2, #31
 8002414:	2101      	movs	r1, #1
 8002416:	fa01 f202 	lsl.w	r2, r1, r2
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0ab      	beq.n	8002378 <HAL_RCC_OscConfig+0x1d0>
 8002420:	e05d      	b.n	80024de <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7fe ff3d 	bl	80012a0 <HAL_GetTick>
 8002426:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242a:	e00a      	b.n	8002442 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800242c:	f7fe ff38 	bl	80012a0 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b64      	cmp	r3, #100	; 0x64
 800243a:	d902      	bls.n	8002442 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	f000 bee9 	b.w	8003214 <HAL_RCC_OscConfig+0x106c>
 8002442:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002446:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002456:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	b2db      	uxtb	r3, r3
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d102      	bne.n	8002474 <HAL_RCC_OscConfig+0x2cc>
 800246e:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	e015      	b.n	80024a0 <HAL_RCC_OscConfig+0x2f8>
 8002474:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002478:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002488:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800248c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002490:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800249c:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_RCC_OscConfig+0x330>)
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024a4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80024a8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80024ac:	fa92 f2a2 	rbit	r2, r2
 80024b0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80024b4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80024b8:	fab2 f282 	clz	r2, r2
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	f042 0220 	orr.w	r2, r2, #32
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	f002 021f 	and.w	r2, r2, #31
 80024c8:	2101      	movs	r1, #1
 80024ca:	fa01 f202 	lsl.w	r2, r1, r2
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1ab      	bne.n	800242c <HAL_RCC_OscConfig+0x284>
 80024d4:	e003      	b.n	80024de <HAL_RCC_OscConfig+0x336>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 817d 	beq.w	80027ee <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024f4:	4ba6      	ldr	r3, [pc, #664]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00b      	beq.n	8002518 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002500:	4ba3      	ldr	r3, [pc, #652]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b08      	cmp	r3, #8
 800250a:	d172      	bne.n	80025f2 <HAL_RCC_OscConfig+0x44a>
 800250c:	4ba0      	ldr	r3, [pc, #640]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d16c      	bne.n	80025f2 <HAL_RCC_OscConfig+0x44a>
 8002518:	2302      	movs	r3, #2
 800251a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800252a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	095b      	lsrs	r3, r3, #5
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d102      	bne.n	8002548 <HAL_RCC_OscConfig+0x3a0>
 8002542:	4b93      	ldr	r3, [pc, #588]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	e013      	b.n	8002570 <HAL_RCC_OscConfig+0x3c8>
 8002548:	2302      	movs	r3, #2
 800254a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800255a:	2302      	movs	r3, #2
 800255c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002560:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800256c:	4b88      	ldr	r3, [pc, #544]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	2202      	movs	r2, #2
 8002572:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002576:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800257a:	fa92 f2a2 	rbit	r2, r2
 800257e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002582:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002586:	fab2 f282 	clz	r2, r2
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	f042 0220 	orr.w	r2, r2, #32
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f002 021f 	and.w	r2, r2, #31
 8002596:	2101      	movs	r1, #1
 8002598:	fa01 f202 	lsl.w	r2, r1, r2
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCC_OscConfig+0x410>
 80025a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d002      	beq.n	80025b8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	f000 be2e 	b.w	8003214 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b75      	ldr	r3, [pc, #468]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	21f8      	movs	r1, #248	; 0xf8
 80025ce:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80025d6:	fa91 f1a1 	rbit	r1, r1
 80025da:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80025de:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80025e2:	fab1 f181 	clz	r1, r1
 80025e6:	b2c9      	uxtb	r1, r1
 80025e8:	408b      	lsls	r3, r1
 80025ea:	4969      	ldr	r1, [pc, #420]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f0:	e0fd      	b.n	80027ee <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 8088 	beq.w	8002714 <HAL_RCC_OscConfig+0x56c>
 8002604:	2301      	movs	r3, #1
 8002606:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002616:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002624:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	461a      	mov	r2, r3
 800262c:	2301      	movs	r3, #1
 800262e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fe36 	bl	80012a0 <HAL_GetTick>
 8002634:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	e00a      	b.n	8002650 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800263a:	f7fe fe31 	bl	80012a0 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d902      	bls.n	8002650 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	f000 bde2 	b.w	8003214 <HAL_RCC_OscConfig+0x106c>
 8002650:	2302      	movs	r3, #2
 8002652:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002662:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d102      	bne.n	8002680 <HAL_RCC_OscConfig+0x4d8>
 800267a:	4b45      	ldr	r3, [pc, #276]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	e013      	b.n	80026a8 <HAL_RCC_OscConfig+0x500>
 8002680:	2302      	movs	r3, #2
 8002682:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002692:	2302      	movs	r3, #2
 8002694:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002698:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80026a4:	4b3a      	ldr	r3, [pc, #232]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	2202      	movs	r2, #2
 80026aa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80026ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80026b2:	fa92 f2a2 	rbit	r2, r2
 80026b6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80026ba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80026be:	fab2 f282 	clz	r2, r2
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	f042 0220 	orr.w	r2, r2, #32
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	f002 021f 	and.w	r2, r2, #31
 80026ce:	2101      	movs	r1, #1
 80026d0:	fa01 f202 	lsl.w	r2, r1, r2
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0af      	beq.n	800263a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026da:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	21f8      	movs	r1, #248	; 0xf8
 80026f0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80026f8:	fa91 f1a1 	rbit	r1, r1
 80026fc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002700:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002704:	fab1 f181 	clz	r1, r1
 8002708:	b2c9      	uxtb	r1, r1
 800270a:	408b      	lsls	r3, r1
 800270c:	4920      	ldr	r1, [pc, #128]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]
 8002712:	e06c      	b.n	80027ee <HAL_RCC_OscConfig+0x646>
 8002714:	2301      	movs	r3, #1
 8002716:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002726:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002734:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	461a      	mov	r2, r3
 800273c:	2300      	movs	r3, #0
 800273e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7fe fdae 	bl	80012a0 <HAL_GetTick>
 8002744:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274a:	f7fe fda9 	bl	80012a0 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d902      	bls.n	8002760 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	f000 bd5a 	b.w	8003214 <HAL_RCC_OscConfig+0x106c>
 8002760:	2302      	movs	r3, #2
 8002762:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d104      	bne.n	8002794 <HAL_RCC_OscConfig+0x5ec>
 800278a:	4b01      	ldr	r3, [pc, #4]	; (8002790 <HAL_RCC_OscConfig+0x5e8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	e015      	b.n	80027bc <HAL_RCC_OscConfig+0x614>
 8002790:	40021000 	.word	0x40021000
 8002794:	2302      	movs	r3, #2
 8002796:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80027a6:	2302      	movs	r3, #2
 80027a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80027ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80027b8:	4bc8      	ldr	r3, [pc, #800]	; (8002adc <HAL_RCC_OscConfig+0x934>)
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	2202      	movs	r2, #2
 80027be:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80027c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80027c6:	fa92 f2a2 	rbit	r2, r2
 80027ca:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80027ce:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80027d2:	fab2 f282 	clz	r2, r2
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	f042 0220 	orr.w	r2, r2, #32
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	f002 021f 	and.w	r2, r2, #31
 80027e2:	2101      	movs	r1, #1
 80027e4:	fa01 f202 	lsl.w	r2, r1, r2
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1ad      	bne.n	800274a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8110 	beq.w	8002a24 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002808:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d079      	beq.n	8002908 <HAL_RCC_OscConfig+0x760>
 8002814:	2301      	movs	r3, #1
 8002816:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	4bab      	ldr	r3, [pc, #684]	; (8002ae0 <HAL_RCC_OscConfig+0x938>)
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	461a      	mov	r2, r3
 800283a:	2301      	movs	r3, #1
 800283c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7fe fd2f 	bl	80012a0 <HAL_GetTick>
 8002842:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002846:	e00a      	b.n	800285e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002848:	f7fe fd2a 	bl	80012a0 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d902      	bls.n	800285e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	f000 bcdb 	b.w	8003214 <HAL_RCC_OscConfig+0x106c>
 800285e:	2302      	movs	r3, #2
 8002860:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002874:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002878:	2202      	movs	r2, #2
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002880:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	fa93 f2a3 	rbit	r2, r3
 800288a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800289c:	2202      	movs	r2, #2
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	fa93 f2a3 	rbit	r2, r3
 80028ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028b6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b8:	4b88      	ldr	r3, [pc, #544]	; (8002adc <HAL_RCC_OscConfig+0x934>)
 80028ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028c4:	2102      	movs	r1, #2
 80028c6:	6019      	str	r1, [r3, #0]
 80028c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	fa93 f1a3 	rbit	r1, r3
 80028d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028de:	6019      	str	r1, [r3, #0]
  return result;
 80028e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f003 031f 	and.w	r3, r3, #31
 80028fa:	2101      	movs	r1, #1
 80028fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0a0      	beq.n	8002848 <HAL_RCC_OscConfig+0x6a0>
 8002906:	e08d      	b.n	8002a24 <HAL_RCC_OscConfig+0x87c>
 8002908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	fa93 f2a3 	rbit	r2, r3
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800292a:	601a      	str	r2, [r3, #0]
  return result;
 800292c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002930:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002934:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	4b68      	ldr	r3, [pc, #416]	; (8002ae0 <HAL_RCC_OscConfig+0x938>)
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	461a      	mov	r2, r3
 8002946:	2300      	movs	r3, #0
 8002948:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294a:	f7fe fca9 	bl	80012a0 <HAL_GetTick>
 800294e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002952:	e00a      	b.n	800296a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002954:	f7fe fca4 	bl	80012a0 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d902      	bls.n	800296a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	f000 bc55 	b.w	8003214 <HAL_RCC_OscConfig+0x106c>
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002972:	2202      	movs	r2, #2
 8002974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	fa93 f2a3 	rbit	r2, r3
 8002984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002988:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002996:	2202      	movs	r2, #2
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	fa93 f2a3 	rbit	r2, r3
 80029a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80029ba:	2202      	movs	r2, #2
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	fa93 f2a3 	rbit	r2, r3
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80029d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d6:	4b41      	ldr	r3, [pc, #260]	; (8002adc <HAL_RCC_OscConfig+0x934>)
 80029d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029e2:	2102      	movs	r1, #2
 80029e4:	6019      	str	r1, [r3, #0]
 80029e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	fa93 f1a3 	rbit	r1, r3
 80029f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029fc:	6019      	str	r1, [r3, #0]
  return result;
 80029fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a02:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	2101      	movs	r1, #1
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d197      	bne.n	8002954 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 81a1 	beq.w	8002d7c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a40:	4b26      	ldr	r3, [pc, #152]	; (8002adc <HAL_RCC_OscConfig+0x934>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d116      	bne.n	8002a7a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	4b23      	ldr	r3, [pc, #140]	; (8002adc <HAL_RCC_OscConfig+0x934>)
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	4a22      	ldr	r2, [pc, #136]	; (8002adc <HAL_RCC_OscConfig+0x934>)
 8002a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a56:	61d3      	str	r3, [r2, #28]
 8002a58:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_RCC_OscConfig+0x934>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a64:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a72:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <HAL_RCC_OscConfig+0x93c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d11a      	bne.n	8002abc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a86:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <HAL_RCC_OscConfig+0x93c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a16      	ldr	r2, [pc, #88]	; (8002ae4 <HAL_RCC_OscConfig+0x93c>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a92:	f7fe fc05 	bl	80012a0 <HAL_GetTick>
 8002a96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9a:	e009      	b.n	8002ab0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9c:	f7fe fc00 	bl	80012a0 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b64      	cmp	r3, #100	; 0x64
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e3b1      	b.n	8003214 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <HAL_RCC_OscConfig+0x93c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0ef      	beq.n	8002a9c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d10d      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x940>
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <HAL_RCC_OscConfig+0x934>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4a02      	ldr	r2, [pc, #8]	; (8002adc <HAL_RCC_OscConfig+0x934>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6213      	str	r3, [r2, #32]
 8002ad8:	e03c      	b.n	8002b54 <HAL_RCC_OscConfig+0x9ac>
 8002ada:	bf00      	nop
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	10908120 	.word	0x10908120
 8002ae4:	40007000 	.word	0x40007000
 8002ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10c      	bne.n	8002b12 <HAL_RCC_OscConfig+0x96a>
 8002af8:	4bc1      	ldr	r3, [pc, #772]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4ac0      	ldr	r2, [pc, #768]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	6213      	str	r3, [r2, #32]
 8002b04:	4bbe      	ldr	r3, [pc, #760]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4abd      	ldr	r2, [pc, #756]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b0a:	f023 0304 	bic.w	r3, r3, #4
 8002b0e:	6213      	str	r3, [r2, #32]
 8002b10:	e020      	b.n	8002b54 <HAL_RCC_OscConfig+0x9ac>
 8002b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2b05      	cmp	r3, #5
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x994>
 8002b22:	4bb7      	ldr	r3, [pc, #732]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	4ab6      	ldr	r2, [pc, #728]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b28:	f043 0304 	orr.w	r3, r3, #4
 8002b2c:	6213      	str	r3, [r2, #32]
 8002b2e:	4bb4      	ldr	r3, [pc, #720]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4ab3      	ldr	r2, [pc, #716]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6213      	str	r3, [r2, #32]
 8002b3a:	e00b      	b.n	8002b54 <HAL_RCC_OscConfig+0x9ac>
 8002b3c:	4bb0      	ldr	r3, [pc, #704]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4aaf      	ldr	r2, [pc, #700]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b42:	f023 0301 	bic.w	r3, r3, #1
 8002b46:	6213      	str	r3, [r2, #32]
 8002b48:	4bad      	ldr	r3, [pc, #692]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4aac      	ldr	r2, [pc, #688]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002b4e:	f023 0304 	bic.w	r3, r3, #4
 8002b52:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8081 	beq.w	8002c68 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b66:	f7fe fb9b 	bl	80012a0 <HAL_GetTick>
 8002b6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b70:	f7fe fb96 	bl	80012a0 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e345      	b.n	8003214 <HAL_RCC_OscConfig+0x106c>
 8002b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b90:	2202      	movs	r2, #2
 8002b92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b98:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fa93 f2a3 	rbit	r2, r3
 8002ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	fa93 f2a3 	rbit	r2, r3
 8002bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002bce:	601a      	str	r2, [r3, #0]
  return result;
 8002bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002bd8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bda:	fab3 f383 	clz	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d102      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xa4c>
 8002bee:	4b84      	ldr	r3, [pc, #528]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	e013      	b.n	8002c1c <HAL_RCC_OscConfig+0xa74>
 8002bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c04:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	fa93 f2a3 	rbit	r2, r3
 8002c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c12:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	4b79      	ldr	r3, [pc, #484]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c20:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c24:	2102      	movs	r1, #2
 8002c26:	6011      	str	r1, [r2, #0]
 8002c28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c2c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	fa92 f1a2 	rbit	r1, r2
 8002c36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c3a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c3e:	6011      	str	r1, [r2, #0]
  return result;
 8002c40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c44:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	fab2 f282 	clz	r2, r2
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	f002 021f 	and.w	r2, r2, #31
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d084      	beq.n	8002b70 <HAL_RCC_OscConfig+0x9c8>
 8002c66:	e07f      	b.n	8002d68 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c68:	f7fe fb1a 	bl	80012a0 <HAL_GetTick>
 8002c6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c70:	e00b      	b.n	8002c8a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c72:	f7fe fb15 	bl	80012a0 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e2c4      	b.n	8003214 <HAL_RCC_OscConfig+0x106c>
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c92:	2202      	movs	r2, #2
 8002c94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	fa93 f2a3 	rbit	r2, r3
 8002ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	fa93 f2a3 	rbit	r2, r3
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002cd0:	601a      	str	r2, [r3, #0]
  return result;
 8002cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002cda:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d102      	bne.n	8002cf6 <HAL_RCC_OscConfig+0xb4e>
 8002cf0:	4b43      	ldr	r3, [pc, #268]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	e013      	b.n	8002d1e <HAL_RCC_OscConfig+0xb76>
 8002cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002cfe:	2202      	movs	r2, #2
 8002d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d06:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	fa93 f2a3 	rbit	r2, r3
 8002d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d14:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d22:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d26:	2102      	movs	r1, #2
 8002d28:	6011      	str	r1, [r2, #0]
 8002d2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d2e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	fa92 f1a2 	rbit	r1, r2
 8002d38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d3c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d40:	6011      	str	r1, [r2, #0]
  return result;
 8002d42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d46:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	fab2 f282 	clz	r2, r2
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	f002 021f 	and.w	r2, r2, #31
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d184      	bne.n	8002c72 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d68:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d70:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	4a22      	ldr	r2, [pc, #136]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8242 	beq.w	8003212 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d8e:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <HAL_RCC_OscConfig+0xc58>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	f000 8213 	beq.w	80031c2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	f040 8162 	bne.w	8003072 <HAL_RCC_OscConfig+0xeca>
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002db6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	fa93 f2a3 	rbit	r2, r3
 8002dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002dd2:	601a      	str	r2, [r3, #0]
  return result;
 8002dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002ddc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002de8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	461a      	mov	r2, r3
 8002df0:	2300      	movs	r3, #0
 8002df2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7fe fa54 	bl	80012a0 <HAL_GetTick>
 8002df8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfc:	e00c      	b.n	8002e18 <HAL_RCC_OscConfig+0xc70>
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fe fa4c 	bl	80012a0 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e1fd      	b.n	8003214 <HAL_RCC_OscConfig+0x106c>
 8002e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	fa93 f2a3 	rbit	r2, r3
 8002e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e38:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e3c:	601a      	str	r2, [r3, #0]
  return result;
 8002e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e42:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d102      	bne.n	8002e62 <HAL_RCC_OscConfig+0xcba>
 8002e5c:	4bb0      	ldr	r3, [pc, #704]	; (8003120 <HAL_RCC_OscConfig+0xf78>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	e027      	b.n	8002eb2 <HAL_RCC_OscConfig+0xd0a>
 8002e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e66:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e74:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	fa93 f2a3 	rbit	r2, r3
 8002e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e82:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	fa93 f2a3 	rbit	r2, r3
 8002ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	4b9c      	ldr	r3, [pc, #624]	; (8003120 <HAL_RCC_OscConfig+0xf78>)
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eb6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002eba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ebe:	6011      	str	r1, [r2, #0]
 8002ec0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ec4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	fa92 f1a2 	rbit	r1, r2
 8002ece:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ed2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ed6:	6011      	str	r1, [r2, #0]
  return result;
 8002ed8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002edc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	fab2 f282 	clz	r2, r2
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	f042 0220 	orr.w	r2, r2, #32
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	f002 021f 	and.w	r2, r2, #31
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d182      	bne.n	8002e04 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002efe:	4b88      	ldr	r3, [pc, #544]	; (8003120 <HAL_RCC_OscConfig+0xf78>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	497f      	ldr	r1, [pc, #508]	; (8003120 <HAL_RCC_OscConfig+0xf78>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	604b      	str	r3, [r1, #4]
 8002f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f38:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	fa93 f2a3 	rbit	r2, r3
 8002f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f46:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f4a:	601a      	str	r2, [r3, #0]
  return result;
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f54:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	461a      	mov	r2, r3
 8002f68:	2301      	movs	r3, #1
 8002f6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fe f998 	bl	80012a0 <HAL_GetTick>
 8002f70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f74:	e009      	b.n	8002f8a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f76:	f7fe f993 	bl	80012a0 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e144      	b.n	8003214 <HAL_RCC_OscConfig+0x106c>
 8002f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	fa93 f2a3 	rbit	r2, r3
 8002fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002faa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002fae:	601a      	str	r2, [r3, #0]
  return result;
 8002fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002fb8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d102      	bne.n	8002fd4 <HAL_RCC_OscConfig+0xe2c>
 8002fce:	4b54      	ldr	r3, [pc, #336]	; (8003120 <HAL_RCC_OscConfig+0xf78>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	e027      	b.n	8003024 <HAL_RCC_OscConfig+0xe7c>
 8002fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002fdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	fa93 f2a3 	rbit	r2, r3
 8002ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003002:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	fa93 f2a3 	rbit	r2, r3
 8003016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	4b3f      	ldr	r3, [pc, #252]	; (8003120 <HAL_RCC_OscConfig+0xf78>)
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003028:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800302c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003030:	6011      	str	r1, [r2, #0]
 8003032:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003036:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	fa92 f1a2 	rbit	r1, r2
 8003040:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003044:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003048:	6011      	str	r1, [r2, #0]
  return result;
 800304a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800304e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	fab2 f282 	clz	r2, r2
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	f042 0220 	orr.w	r2, r2, #32
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	f002 021f 	and.w	r2, r2, #31
 8003064:	2101      	movs	r1, #1
 8003066:	fa01 f202 	lsl.w	r2, r1, r2
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d082      	beq.n	8002f76 <HAL_RCC_OscConfig+0xdce>
 8003070:	e0cf      	b.n	8003212 <HAL_RCC_OscConfig+0x106a>
 8003072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003076:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800307a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800307e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003084:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	fa93 f2a3 	rbit	r2, r3
 800308e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003092:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003096:	601a      	str	r2, [r3, #0]
  return result;
 8003098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80030a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	461a      	mov	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fe f8f2 	bl	80012a0 <HAL_GetTick>
 80030bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c0:	e009      	b.n	80030d6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c2:	f7fe f8ed 	bl	80012a0 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e09e      	b.n	8003214 <HAL_RCC_OscConfig+0x106c>
 80030d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030da:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80030de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	fa93 f2a3 	rbit	r2, r3
 80030f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030fa:	601a      	str	r2, [r3, #0]
  return result;
 80030fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003100:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003104:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b01      	cmp	r3, #1
 8003118:	d104      	bne.n	8003124 <HAL_RCC_OscConfig+0xf7c>
 800311a:	4b01      	ldr	r3, [pc, #4]	; (8003120 <HAL_RCC_OscConfig+0xf78>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	e029      	b.n	8003174 <HAL_RCC_OscConfig+0xfcc>
 8003120:	40021000 	.word	0x40021000
 8003124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003128:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800312c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003130:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003136:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	fa93 f2a3 	rbit	r2, r3
 8003140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003144:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003152:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	fa93 f2a3 	rbit	r2, r3
 8003166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	4b2b      	ldr	r3, [pc, #172]	; (8003220 <HAL_RCC_OscConfig+0x1078>)
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003178:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800317c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003180:	6011      	str	r1, [r2, #0]
 8003182:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003186:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	fa92 f1a2 	rbit	r1, r2
 8003190:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003194:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003198:	6011      	str	r1, [r2, #0]
  return result;
 800319a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800319e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	fab2 f282 	clz	r2, r2
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	f042 0220 	orr.w	r2, r2, #32
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	f002 021f 	and.w	r2, r2, #31
 80031b4:	2101      	movs	r1, #1
 80031b6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d180      	bne.n	80030c2 <HAL_RCC_OscConfig+0xf1a>
 80031c0:	e027      	b.n	8003212 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e01e      	b.n	8003214 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031d6:	4b12      	ldr	r3, [pc, #72]	; (8003220 <HAL_RCC_OscConfig+0x1078>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031e2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d10b      	bne.n	800320e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800320a:	429a      	cmp	r2, r3
 800320c:	d001      	beq.n	8003212 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000

08003224 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b09e      	sub	sp, #120	; 0x78
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e162      	b.n	8003502 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800323c:	4b90      	ldr	r3, [pc, #576]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d910      	bls.n	800326c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b8d      	ldr	r3, [pc, #564]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 0207 	bic.w	r2, r3, #7
 8003252:	498b      	ldr	r1, [pc, #556]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b89      	ldr	r3, [pc, #548]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e14a      	b.n	8003502 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003278:	4b82      	ldr	r3, [pc, #520]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	497f      	ldr	r1, [pc, #508]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 8003286:	4313      	orrs	r3, r2
 8003288:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80dc 	beq.w	8003450 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d13c      	bne.n	800331a <HAL_RCC_ClockConfig+0xf6>
 80032a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d102      	bne.n	80032ca <HAL_RCC_ClockConfig+0xa6>
 80032c4:	4b6f      	ldr	r3, [pc, #444]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	e00f      	b.n	80032ea <HAL_RCC_ClockConfig+0xc6>
 80032ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	667b      	str	r3, [r7, #100]	; 0x64
 80032d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032dc:	663b      	str	r3, [r7, #96]	; 0x60
 80032de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032e0:	fa93 f3a3 	rbit	r3, r3
 80032e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032e6:	4b67      	ldr	r3, [pc, #412]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80032f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032f2:	fa92 f2a2 	rbit	r2, r2
 80032f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80032f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032fa:	fab2 f282 	clz	r2, r2
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	f042 0220 	orr.w	r2, r2, #32
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	f002 021f 	and.w	r2, r2, #31
 800330a:	2101      	movs	r1, #1
 800330c:	fa01 f202 	lsl.w	r2, r1, r2
 8003310:	4013      	ands	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d17b      	bne.n	800340e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e0f3      	b.n	8003502 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d13c      	bne.n	800339c <HAL_RCC_ClockConfig+0x178>
 8003322:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003326:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d102      	bne.n	800334c <HAL_RCC_ClockConfig+0x128>
 8003346:	4b4f      	ldr	r3, [pc, #316]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	e00f      	b.n	800336c <HAL_RCC_ClockConfig+0x148>
 800334c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003350:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	647b      	str	r3, [r7, #68]	; 0x44
 800335a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800335e:	643b      	str	r3, [r7, #64]	; 0x40
 8003360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003362:	fa93 f3a3 	rbit	r3, r3
 8003366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003368:	4b46      	ldr	r3, [pc, #280]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003370:	63ba      	str	r2, [r7, #56]	; 0x38
 8003372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003374:	fa92 f2a2 	rbit	r2, r2
 8003378:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800337a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800337c:	fab2 f282 	clz	r2, r2
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	f042 0220 	orr.w	r2, r2, #32
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	f002 021f 	and.w	r2, r2, #31
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f202 	lsl.w	r2, r1, r2
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d13a      	bne.n	800340e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0b2      	b.n	8003502 <HAL_RCC_ClockConfig+0x2de>
 800339c:	2302      	movs	r3, #2
 800339e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d102      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x1a0>
 80033be:	4b31      	ldr	r3, [pc, #196]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	e00d      	b.n	80033e0 <HAL_RCC_ClockConfig+0x1bc>
 80033c4:	2302      	movs	r3, #2
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
 80033d0:	2302      	movs	r3, #2
 80033d2:	623b      	str	r3, [r7, #32]
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	fa93 f3a3 	rbit	r3, r3
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	4b29      	ldr	r3, [pc, #164]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	2202      	movs	r2, #2
 80033e2:	61ba      	str	r2, [r7, #24]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	fa92 f2a2 	rbit	r2, r2
 80033ea:	617a      	str	r2, [r7, #20]
  return result;
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	fab2 f282 	clz	r2, r2
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	f042 0220 	orr.w	r2, r2, #32
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	f002 021f 	and.w	r2, r2, #31
 80033fe:	2101      	movs	r1, #1
 8003400:	fa01 f202 	lsl.w	r2, r1, r2
 8003404:	4013      	ands	r3, r2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e079      	b.n	8003502 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800340e:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f023 0203 	bic.w	r2, r3, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	491a      	ldr	r1, [pc, #104]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003420:	f7fd ff3e 	bl	80012a0 <HAL_GetTick>
 8003424:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003426:	e00a      	b.n	800343e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003428:	f7fd ff3a 	bl	80012a0 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	; 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e061      	b.n	8003502 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343e:	4b11      	ldr	r3, [pc, #68]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 020c 	and.w	r2, r3, #12
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	429a      	cmp	r2, r3
 800344e:	d1eb      	bne.n	8003428 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d214      	bcs.n	8003488 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345e:	4b08      	ldr	r3, [pc, #32]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 0207 	bic.w	r2, r3, #7
 8003466:	4906      	ldr	r1, [pc, #24]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346e:	4b04      	ldr	r3, [pc, #16]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d005      	beq.n	8003488 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e040      	b.n	8003502 <HAL_RCC_ClockConfig+0x2de>
 8003480:	40022000 	.word	0x40022000
 8003484:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003494:	4b1d      	ldr	r3, [pc, #116]	; (800350c <HAL_RCC_ClockConfig+0x2e8>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	491a      	ldr	r1, [pc, #104]	; (800350c <HAL_RCC_ClockConfig+0x2e8>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b2:	4b16      	ldr	r3, [pc, #88]	; (800350c <HAL_RCC_ClockConfig+0x2e8>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4912      	ldr	r1, [pc, #72]	; (800350c <HAL_RCC_ClockConfig+0x2e8>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034c6:	f000 f85d 	bl	8003584 <HAL_RCC_GetSysClockFreq>
 80034ca:	4601      	mov	r1, r0
 80034cc:	4b0f      	ldr	r3, [pc, #60]	; (800350c <HAL_RCC_ClockConfig+0x2e8>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d4:	22f0      	movs	r2, #240	; 0xf0
 80034d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	fa92 f2a2 	rbit	r2, r2
 80034de:	60fa      	str	r2, [r7, #12]
  return result;
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	fab2 f282 	clz	r2, r2
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	40d3      	lsrs	r3, r2
 80034ea:	4a09      	ldr	r2, [pc, #36]	; (8003510 <HAL_RCC_ClockConfig+0x2ec>)
 80034ec:	5cd3      	ldrb	r3, [r2, r3]
 80034ee:	fa21 f303 	lsr.w	r3, r1, r3
 80034f2:	4a08      	ldr	r2, [pc, #32]	; (8003514 <HAL_RCC_ClockConfig+0x2f0>)
 80034f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034f6:	4b08      	ldr	r3, [pc, #32]	; (8003518 <HAL_RCC_ClockConfig+0x2f4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fd fe8c 	bl	8001218 <HAL_InitTick>
  
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3778      	adds	r7, #120	; 0x78
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
 8003510:	080078fc 	.word	0x080078fc
 8003514:	20000014 	.word	0x20000014
 8003518:	20000018 	.word	0x20000018

0800351c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	; 0x28
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8003528:	2302      	movs	r3, #2
 800352a:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800352c:	2303      	movs	r3, #3
 800352e:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8003534:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003538:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 800353a:	2300      	movs	r3, #0
 800353c:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800353e:	4b10      	ldr	r3, [pc, #64]	; (8003580 <HAL_RCC_MCOConfig+0x64>)
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	4a0f      	ldr	r2, [pc, #60]	; (8003580 <HAL_RCC_MCOConfig+0x64>)
 8003544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003548:	6153      	str	r3, [r2, #20]
 800354a:	4b0d      	ldr	r3, [pc, #52]	; (8003580 <HAL_RCC_MCOConfig+0x64>)
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	613b      	str	r3, [r7, #16]
 8003554:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8003556:	f107 0314 	add.w	r3, r7, #20
 800355a:	4619      	mov	r1, r3
 800355c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003560:	f7fd ffe0 	bl	8001524 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <HAL_RCC_MCOConfig+0x64>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	430b      	orrs	r3, r1
 8003572:	4903      	ldr	r1, [pc, #12]	; (8003580 <HAL_RCC_MCOConfig+0x64>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]
}
 8003578:	bf00      	nop
 800357a:	3728      	adds	r7, #40	; 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40021000 	.word	0x40021000

08003584 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003584:	b480      	push	{r7}
 8003586:	b08b      	sub	sp, #44	; 0x2c
 8003588:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	2300      	movs	r3, #0
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800359e:	4b29      	ldr	r3, [pc, #164]	; (8003644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d002      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x30>
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_GetSysClockFreq+0x36>
 80035b2:	e03c      	b.n	800362e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035b4:	4b24      	ldr	r3, [pc, #144]	; (8003648 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035b6:	623b      	str	r3, [r7, #32]
      break;
 80035b8:	e03c      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80035c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80035c4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	fa92 f2a2 	rbit	r2, r2
 80035cc:	607a      	str	r2, [r7, #4]
  return result;
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	fab2 f282 	clz	r2, r2
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	40d3      	lsrs	r3, r2
 80035d8:	4a1c      	ldr	r2, [pc, #112]	; (800364c <HAL_RCC_GetSysClockFreq+0xc8>)
 80035da:	5cd3      	ldrb	r3, [r2, r3]
 80035dc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035de:	4b19      	ldr	r3, [pc, #100]	; (8003644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	220f      	movs	r2, #15
 80035e8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	fa92 f2a2 	rbit	r2, r2
 80035f0:	60fa      	str	r2, [r7, #12]
  return result;
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	fab2 f282 	clz	r2, r2
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	40d3      	lsrs	r3, r2
 80035fc:	4a14      	ldr	r2, [pc, #80]	; (8003650 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035fe:	5cd3      	ldrb	r3, [r2, r3]
 8003600:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800360c:	4a0e      	ldr	r2, [pc, #56]	; (8003648 <HAL_RCC_GetSysClockFreq+0xc4>)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	fbb2 f2f3 	udiv	r2, r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
 800361c:	e004      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	4a0c      	ldr	r2, [pc, #48]	; (8003654 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	623b      	str	r3, [r7, #32]
      break;
 800362c:	e002      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003630:	623b      	str	r3, [r7, #32]
      break;
 8003632:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003634:	6a3b      	ldr	r3, [r7, #32]
}
 8003636:	4618      	mov	r0, r3
 8003638:	372c      	adds	r7, #44	; 0x2c
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40021000 	.word	0x40021000
 8003648:	007a1200 	.word	0x007a1200
 800364c:	08007914 	.word	0x08007914
 8003650:	08007924 	.word	0x08007924
 8003654:	003d0900 	.word	0x003d0900

08003658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <HAL_RCC_GetHCLKFreq+0x14>)
 800365e:	681b      	ldr	r3, [r3, #0]
}
 8003660:	4618      	mov	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20000014 	.word	0x20000014

08003670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003676:	f7ff ffef 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 800367a:	4601      	mov	r1, r0
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003684:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003688:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	fa92 f2a2 	rbit	r2, r2
 8003690:	603a      	str	r2, [r7, #0]
  return result;
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	fab2 f282 	clz	r2, r2
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	40d3      	lsrs	r3, r2
 800369c:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800369e:	5cd3      	ldrb	r3, [r2, r3]
 80036a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000
 80036b0:	0800790c 	.word	0x0800790c

080036b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80036ba:	f7ff ffcd 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 80036be:	4601      	mov	r1, r0
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80036c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80036cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	fa92 f2a2 	rbit	r2, r2
 80036d4:	603a      	str	r2, [r7, #0]
  return result;
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	fab2 f282 	clz	r2, r2
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	40d3      	lsrs	r3, r2
 80036e0:	4a04      	ldr	r2, [pc, #16]	; (80036f4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80036e2:	5cd3      	ldrb	r3, [r2, r3]
 80036e4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40021000 	.word	0x40021000
 80036f4:	0800790c 	.word	0x0800790c

080036f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b092      	sub	sp, #72	; 0x48
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003708:	2300      	movs	r3, #0
 800370a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 80d4 	beq.w	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800371c:	4b4e      	ldr	r3, [pc, #312]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10e      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003728:	4b4b      	ldr	r3, [pc, #300]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	4a4a      	ldr	r2, [pc, #296]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003732:	61d3      	str	r3, [r2, #28]
 8003734:	4b48      	ldr	r3, [pc, #288]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003740:	2301      	movs	r3, #1
 8003742:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003746:	4b45      	ldr	r3, [pc, #276]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d118      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003752:	4b42      	ldr	r3, [pc, #264]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a41      	ldr	r2, [pc, #260]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800375e:	f7fd fd9f 	bl	80012a0 <HAL_GetTick>
 8003762:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003764:	e008      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003766:	f7fd fd9b 	bl	80012a0 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b64      	cmp	r3, #100	; 0x64
 8003772:	d901      	bls.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e13c      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003778:	4b38      	ldr	r3, [pc, #224]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003784:	4b34      	ldr	r3, [pc, #208]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800378e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8084 	beq.w	800389e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d07c      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037a4:	4b2c      	ldr	r3, [pc, #176]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	fa93 f3a3 	rbit	r3, r3
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80037bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	461a      	mov	r2, r3
 80037c6:	4b26      	ldr	r3, [pc, #152]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	461a      	mov	r2, r3
 80037ce:	2301      	movs	r3, #1
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80037e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037e2:	fab3 f383 	clz	r3, r3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	461a      	mov	r2, r3
 80037ea:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	461a      	mov	r2, r3
 80037f2:	2300      	movs	r3, #0
 80037f4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037f6:	4a18      	ldr	r2, [pc, #96]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037fa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d04b      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003806:	f7fd fd4b 	bl	80012a0 <HAL_GetTick>
 800380a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380c:	e00a      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380e:	f7fd fd47 	bl	80012a0 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	f241 3288 	movw	r2, #5000	; 0x1388
 800381c:	4293      	cmp	r3, r2
 800381e:	d901      	bls.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e0e6      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8003824:	2302      	movs	r3, #2
 8003826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
 8003830:	2302      	movs	r3, #2
 8003832:	623b      	str	r3, [r7, #32]
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	61fb      	str	r3, [r7, #28]
  return result;
 800383c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383e:	fab3 f383 	clz	r3, r3
 8003842:	b2db      	uxtb	r3, r3
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f043 0302 	orr.w	r3, r3, #2
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d108      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003852:	4b01      	ldr	r3, [pc, #4]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	e00d      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003858:	40021000 	.word	0x40021000
 800385c:	40007000 	.word	0x40007000
 8003860:	10908100 	.word	0x10908100
 8003864:	2302      	movs	r3, #2
 8003866:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	4b62      	ldr	r3, [pc, #392]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	2202      	movs	r2, #2
 8003876:	613a      	str	r2, [r7, #16]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	fa92 f2a2 	rbit	r2, r2
 800387e:	60fa      	str	r2, [r7, #12]
  return result;
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	fab2 f282 	clz	r2, r2
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	f002 021f 	and.w	r2, r2, #31
 8003892:	2101      	movs	r1, #1
 8003894:	fa01 f202 	lsl.w	r2, r1, r2
 8003898:	4013      	ands	r3, r2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0b7      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800389e:	4b57      	ldr	r3, [pc, #348]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4954      	ldr	r1, [pc, #336]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d105      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b8:	4b50      	ldr	r3, [pc, #320]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	4a4f      	ldr	r2, [pc, #316]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038d0:	4b4a      	ldr	r3, [pc, #296]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	f023 0203 	bic.w	r2, r3, #3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4947      	ldr	r1, [pc, #284]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ee:	4b43      	ldr	r3, [pc, #268]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f023 0210 	bic.w	r2, r3, #16
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	4940      	ldr	r1, [pc, #256]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800390c:	4b3b      	ldr	r3, [pc, #236]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	f023 0220 	bic.w	r2, r3, #32
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	4938      	ldr	r1, [pc, #224]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800391a:	4313      	orrs	r3, r2
 800391c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800392a:	4b34      	ldr	r3, [pc, #208]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	4931      	ldr	r1, [pc, #196]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003938:	4313      	orrs	r3, r2
 800393a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003948:	4b2c      	ldr	r3, [pc, #176]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	4929      	ldr	r1, [pc, #164]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003956:	4313      	orrs	r3, r2
 8003958:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003966:	4b25      	ldr	r3, [pc, #148]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	4922      	ldr	r1, [pc, #136]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003974:	4313      	orrs	r3, r2
 8003976:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003984:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	491a      	ldr	r1, [pc, #104]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003992:	4313      	orrs	r3, r2
 8003994:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80039a2:	4b16      	ldr	r3, [pc, #88]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	4913      	ldr	r1, [pc, #76]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80039c0:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	490b      	ldr	r1, [pc, #44]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80039de:	4b07      	ldr	r3, [pc, #28]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	4904      	ldr	r1, [pc, #16]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3748      	adds	r7, #72	; 0x48
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000

08003a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e049      	b.n	8003aa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fd fa54 	bl	8000ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4610      	mov	r0, r2
 8003a40:	f000 fdec 	bl	800461c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d001      	beq.n	8003ac8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e03b      	b.n	8003b40 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0201 	orr.w	r2, r2, #1
 8003ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a19      	ldr	r2, [pc, #100]	; (8003b4c <HAL_TIM_Base_Start_IT+0x9c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_TIM_Base_Start_IT+0x4e>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af2:	d004      	beq.n	8003afe <HAL_TIM_Base_Start_IT+0x4e>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a15      	ldr	r2, [pc, #84]	; (8003b50 <HAL_TIM_Base_Start_IT+0xa0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d115      	bne.n	8003b2a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <HAL_TIM_Base_Start_IT+0xa4>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b06      	cmp	r3, #6
 8003b0e:	d015      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x8c>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b16:	d011      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b28:	e008      	b.n	8003b3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0201 	orr.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	e000      	b.n	8003b3e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	40014000 	.word	0x40014000
 8003b54:	00010007 	.word	0x00010007

08003b58 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0201 	bic.w	r2, r2, #1
 8003b6e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6a1a      	ldr	r2, [r3, #32]
 8003b76:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10f      	bne.n	8003ba0 <HAL_TIM_Base_Stop_IT+0x48>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6a1a      	ldr	r2, [r3, #32]
 8003b86:	f240 4344 	movw	r3, #1092	; 0x444
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d107      	bne.n	8003ba0 <HAL_TIM_Base_Stop_IT+0x48>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e049      	b.n	8003c5c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d106      	bne.n	8003be2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f841 	bl	8003c64 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2202      	movs	r2, #2
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	f000 fd11 	bl	800461c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d104      	bne.n	8003c96 <HAL_TIM_IC_Start_IT+0x1e>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	e023      	b.n	8003cde <HAL_TIM_IC_Start_IT+0x66>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d104      	bne.n	8003ca6 <HAL_TIM_IC_Start_IT+0x2e>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	e01b      	b.n	8003cde <HAL_TIM_IC_Start_IT+0x66>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d104      	bne.n	8003cb6 <HAL_TIM_IC_Start_IT+0x3e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	e013      	b.n	8003cde <HAL_TIM_IC_Start_IT+0x66>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b0c      	cmp	r3, #12
 8003cba:	d104      	bne.n	8003cc6 <HAL_TIM_IC_Start_IT+0x4e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	e00b      	b.n	8003cde <HAL_TIM_IC_Start_IT+0x66>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d104      	bne.n	8003cd6 <HAL_TIM_IC_Start_IT+0x5e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	e003      	b.n	8003cde <HAL_TIM_IC_Start_IT+0x66>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d104      	bne.n	8003cf0 <HAL_TIM_IC_Start_IT+0x78>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	e013      	b.n	8003d18 <HAL_TIM_IC_Start_IT+0xa0>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d104      	bne.n	8003d00 <HAL_TIM_IC_Start_IT+0x88>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e00b      	b.n	8003d18 <HAL_TIM_IC_Start_IT+0xa0>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d104      	bne.n	8003d10 <HAL_TIM_IC_Start_IT+0x98>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	e003      	b.n	8003d18 <HAL_TIM_IC_Start_IT+0xa0>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d1a:	7bbb      	ldrb	r3, [r7, #14]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d102      	bne.n	8003d26 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d20:	7b7b      	ldrb	r3, [r7, #13]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d001      	beq.n	8003d2a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e0c9      	b.n	8003ebe <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d104      	bne.n	8003d3a <HAL_TIM_IC_Start_IT+0xc2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d38:	e023      	b.n	8003d82 <HAL_TIM_IC_Start_IT+0x10a>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d104      	bne.n	8003d4a <HAL_TIM_IC_Start_IT+0xd2>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d48:	e01b      	b.n	8003d82 <HAL_TIM_IC_Start_IT+0x10a>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d104      	bne.n	8003d5a <HAL_TIM_IC_Start_IT+0xe2>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d58:	e013      	b.n	8003d82 <HAL_TIM_IC_Start_IT+0x10a>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b0c      	cmp	r3, #12
 8003d5e:	d104      	bne.n	8003d6a <HAL_TIM_IC_Start_IT+0xf2>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d68:	e00b      	b.n	8003d82 <HAL_TIM_IC_Start_IT+0x10a>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d104      	bne.n	8003d7a <HAL_TIM_IC_Start_IT+0x102>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d78:	e003      	b.n	8003d82 <HAL_TIM_IC_Start_IT+0x10a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d104      	bne.n	8003d92 <HAL_TIM_IC_Start_IT+0x11a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d90:	e013      	b.n	8003dba <HAL_TIM_IC_Start_IT+0x142>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d104      	bne.n	8003da2 <HAL_TIM_IC_Start_IT+0x12a>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003da0:	e00b      	b.n	8003dba <HAL_TIM_IC_Start_IT+0x142>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d104      	bne.n	8003db2 <HAL_TIM_IC_Start_IT+0x13a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003db0:	e003      	b.n	8003dba <HAL_TIM_IC_Start_IT+0x142>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b0c      	cmp	r3, #12
 8003dbe:	d841      	bhi.n	8003e44 <HAL_TIM_IC_Start_IT+0x1cc>
 8003dc0:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <HAL_TIM_IC_Start_IT+0x150>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003dfd 	.word	0x08003dfd
 8003dcc:	08003e45 	.word	0x08003e45
 8003dd0:	08003e45 	.word	0x08003e45
 8003dd4:	08003e45 	.word	0x08003e45
 8003dd8:	08003e0f 	.word	0x08003e0f
 8003ddc:	08003e45 	.word	0x08003e45
 8003de0:	08003e45 	.word	0x08003e45
 8003de4:	08003e45 	.word	0x08003e45
 8003de8:	08003e21 	.word	0x08003e21
 8003dec:	08003e45 	.word	0x08003e45
 8003df0:	08003e45 	.word	0x08003e45
 8003df4:	08003e45 	.word	0x08003e45
 8003df8:	08003e33 	.word	0x08003e33
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0202 	orr.w	r2, r2, #2
 8003e0a:	60da      	str	r2, [r3, #12]
      break;
 8003e0c:	e01d      	b.n	8003e4a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0204 	orr.w	r2, r2, #4
 8003e1c:	60da      	str	r2, [r3, #12]
      break;
 8003e1e:	e014      	b.n	8003e4a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0208 	orr.w	r2, r2, #8
 8003e2e:	60da      	str	r2, [r3, #12]
      break;
 8003e30:	e00b      	b.n	8003e4a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0210 	orr.w	r2, r2, #16
 8003e40:	60da      	str	r2, [r3, #12]
      break;
 8003e42:	e002      	b.n	8003e4a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	73fb      	strb	r3, [r7, #15]
      break;
 8003e48:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d135      	bne.n	8003ebc <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2201      	movs	r2, #1
 8003e56:	6839      	ldr	r1, [r7, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fdf3 	bl	8004a44 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a19      	ldr	r2, [pc, #100]	; (8003ec8 <HAL_TIM_IC_Start_IT+0x250>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d009      	beq.n	8003e7c <HAL_TIM_IC_Start_IT+0x204>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e70:	d004      	beq.n	8003e7c <HAL_TIM_IC_Start_IT+0x204>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a15      	ldr	r2, [pc, #84]	; (8003ecc <HAL_TIM_IC_Start_IT+0x254>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d115      	bne.n	8003ea8 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	4b13      	ldr	r3, [pc, #76]	; (8003ed0 <HAL_TIM_IC_Start_IT+0x258>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b06      	cmp	r3, #6
 8003e8c:	d015      	beq.n	8003eba <HAL_TIM_IC_Start_IT+0x242>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e94:	d011      	beq.n	8003eba <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea6:	e008      	b.n	8003eba <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	e000      	b.n	8003ebc <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eba:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40012c00 	.word	0x40012c00
 8003ecc:	40014000 	.word	0x40014000
 8003ed0:	00010007 	.word	0x00010007

08003ed4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b0c      	cmp	r3, #12
 8003ee6:	d841      	bhi.n	8003f6c <HAL_TIM_IC_Stop_IT+0x98>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <HAL_TIM_IC_Stop_IT+0x1c>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f25 	.word	0x08003f25
 8003ef4:	08003f6d 	.word	0x08003f6d
 8003ef8:	08003f6d 	.word	0x08003f6d
 8003efc:	08003f6d 	.word	0x08003f6d
 8003f00:	08003f37 	.word	0x08003f37
 8003f04:	08003f6d 	.word	0x08003f6d
 8003f08:	08003f6d 	.word	0x08003f6d
 8003f0c:	08003f6d 	.word	0x08003f6d
 8003f10:	08003f49 	.word	0x08003f49
 8003f14:	08003f6d 	.word	0x08003f6d
 8003f18:	08003f6d 	.word	0x08003f6d
 8003f1c:	08003f6d 	.word	0x08003f6d
 8003f20:	08003f5b 	.word	0x08003f5b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0202 	bic.w	r2, r2, #2
 8003f32:	60da      	str	r2, [r3, #12]
      break;
 8003f34:	e01d      	b.n	8003f72 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0204 	bic.w	r2, r2, #4
 8003f44:	60da      	str	r2, [r3, #12]
      break;
 8003f46:	e014      	b.n	8003f72 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0208 	bic.w	r2, r2, #8
 8003f56:	60da      	str	r2, [r3, #12]
      break;
 8003f58:	e00b      	b.n	8003f72 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0210 	bic.w	r2, r2, #16
 8003f68:	60da      	str	r2, [r3, #12]
      break;
 8003f6a:	e002      	b.n	8003f72 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f70:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d166      	bne.n	8004046 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	6839      	ldr	r1, [r7, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fd5f 	bl	8004a44 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a1a      	ldr	r2, [r3, #32]
 8003f8c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10f      	bne.n	8003fb6 <HAL_TIM_IC_Stop_IT+0xe2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6a1a      	ldr	r2, [r3, #32]
 8003f9c:	f240 4344 	movw	r3, #1092	; 0x444
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d107      	bne.n	8003fb6 <HAL_TIM_IC_Stop_IT+0xe2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0201 	bic.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d104      	bne.n	8003fc6 <HAL_TIM_IC_Stop_IT+0xf2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fc4:	e023      	b.n	800400e <HAL_TIM_IC_Stop_IT+0x13a>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d104      	bne.n	8003fd6 <HAL_TIM_IC_Stop_IT+0x102>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd4:	e01b      	b.n	800400e <HAL_TIM_IC_Stop_IT+0x13a>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d104      	bne.n	8003fe6 <HAL_TIM_IC_Stop_IT+0x112>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe4:	e013      	b.n	800400e <HAL_TIM_IC_Stop_IT+0x13a>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b0c      	cmp	r3, #12
 8003fea:	d104      	bne.n	8003ff6 <HAL_TIM_IC_Stop_IT+0x122>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ff4:	e00b      	b.n	800400e <HAL_TIM_IC_Stop_IT+0x13a>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d104      	bne.n	8004006 <HAL_TIM_IC_Stop_IT+0x132>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004004:	e003      	b.n	800400e <HAL_TIM_IC_Stop_IT+0x13a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d104      	bne.n	800401e <HAL_TIM_IC_Stop_IT+0x14a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800401c:	e013      	b.n	8004046 <HAL_TIM_IC_Stop_IT+0x172>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b04      	cmp	r3, #4
 8004022:	d104      	bne.n	800402e <HAL_TIM_IC_Stop_IT+0x15a>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800402c:	e00b      	b.n	8004046 <HAL_TIM_IC_Stop_IT+0x172>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d104      	bne.n	800403e <HAL_TIM_IC_Stop_IT+0x16a>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800403c:	e003      	b.n	8004046 <HAL_TIM_IC_Stop_IT+0x172>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8004046:	7bfb      	ldrb	r3, [r7, #15]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b02      	cmp	r3, #2
 8004064:	d122      	bne.n	80040ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b02      	cmp	r3, #2
 8004072:	d11b      	bne.n	80040ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0202 	mvn.w	r2, #2
 800407c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fc fb8a 	bl	80007ac <HAL_TIM_IC_CaptureCallback>
 8004098:	e005      	b.n	80040a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 faa0 	bl	80045e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 faa7 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d122      	bne.n	8004100 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	d11b      	bne.n	8004100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0204 	mvn.w	r2, #4
 80040d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2202      	movs	r2, #2
 80040d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fc fb60 	bl	80007ac <HAL_TIM_IC_CaptureCallback>
 80040ec:	e005      	b.n	80040fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fa76 	bl	80045e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fa7d 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b08      	cmp	r3, #8
 800410c:	d122      	bne.n	8004154 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b08      	cmp	r3, #8
 800411a:	d11b      	bne.n	8004154 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0208 	mvn.w	r2, #8
 8004124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2204      	movs	r2, #4
 800412a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fc fb36 	bl	80007ac <HAL_TIM_IC_CaptureCallback>
 8004140:	e005      	b.n	800414e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fa4c 	bl	80045e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fa53 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f003 0310 	and.w	r3, r3, #16
 800415e:	2b10      	cmp	r3, #16
 8004160:	d122      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f003 0310 	and.w	r3, r3, #16
 800416c:	2b10      	cmp	r3, #16
 800416e:	d11b      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0210 	mvn.w	r2, #16
 8004178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2208      	movs	r2, #8
 800417e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fc fb0c 	bl	80007ac <HAL_TIM_IC_CaptureCallback>
 8004194:	e005      	b.n	80041a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fa22 	bl	80045e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fa29 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d10e      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d107      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0201 	mvn.w	r2, #1
 80041cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fc fb58 	bl	8000884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041de:	2b80      	cmp	r3, #128	; 0x80
 80041e0:	d10e      	bne.n	8004200 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ec:	2b80      	cmp	r3, #128	; 0x80
 80041ee:	d107      	bne.n	8004200 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fcb8 	bl	8004b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420e:	d10e      	bne.n	800422e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421a:	2b80      	cmp	r3, #128	; 0x80
 800421c:	d107      	bne.n	800422e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fcab 	bl	8004b84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	d10e      	bne.n	800425a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004246:	2b40      	cmp	r3, #64	; 0x40
 8004248:	d107      	bne.n	800425a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f9d7 	bl	8004608 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b20      	cmp	r3, #32
 8004266:	d10e      	bne.n	8004286 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b20      	cmp	r3, #32
 8004274:	d107      	bne.n	8004286 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f06f 0220 	mvn.w	r2, #32
 800427e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fc6b 	bl	8004b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b086      	sub	sp, #24
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_TIM_IC_ConfigChannel+0x1e>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e088      	b.n	80043be <HAL_TIM_IC_ConfigChannel+0x130>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d11b      	bne.n	80042f2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80042ca:	f000 fa15 	bl	80046f8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699a      	ldr	r2, [r3, #24]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 020c 	bic.w	r2, r2, #12
 80042dc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6999      	ldr	r1, [r3, #24]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	619a      	str	r2, [r3, #24]
 80042f0:	e060      	b.n	80043b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d11c      	bne.n	8004332 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004308:	f000 fa7b 	bl	8004802 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800431a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6999      	ldr	r1, [r3, #24]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	021a      	lsls	r2, r3, #8
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	619a      	str	r2, [r3, #24]
 8004330:	e040      	b.n	80043b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d11b      	bne.n	8004370 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004348:	f000 fac8 	bl	80048dc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69da      	ldr	r2, [r3, #28]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 020c 	bic.w	r2, r2, #12
 800435a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69d9      	ldr	r1, [r3, #28]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	61da      	str	r2, [r3, #28]
 800436e:	e021      	b.n	80043b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b0c      	cmp	r3, #12
 8004374:	d11c      	bne.n	80043b0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004386:	f000 fae5 	bl	8004954 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004398:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69d9      	ldr	r1, [r3, #28]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	021a      	lsls	r2, r3, #8
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	61da      	str	r2, [r3, #28]
 80043ae:	e001      	b.n	80043b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_TIM_ConfigClockSource+0x1c>
 80043de:	2302      	movs	r3, #2
 80043e0:	e0b6      	b.n	8004550 <HAL_TIM_ConfigClockSource+0x18a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004400:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004404:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800440c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800441e:	d03e      	beq.n	800449e <HAL_TIM_ConfigClockSource+0xd8>
 8004420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004424:	f200 8087 	bhi.w	8004536 <HAL_TIM_ConfigClockSource+0x170>
 8004428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442c:	f000 8086 	beq.w	800453c <HAL_TIM_ConfigClockSource+0x176>
 8004430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004434:	d87f      	bhi.n	8004536 <HAL_TIM_ConfigClockSource+0x170>
 8004436:	2b70      	cmp	r3, #112	; 0x70
 8004438:	d01a      	beq.n	8004470 <HAL_TIM_ConfigClockSource+0xaa>
 800443a:	2b70      	cmp	r3, #112	; 0x70
 800443c:	d87b      	bhi.n	8004536 <HAL_TIM_ConfigClockSource+0x170>
 800443e:	2b60      	cmp	r3, #96	; 0x60
 8004440:	d050      	beq.n	80044e4 <HAL_TIM_ConfigClockSource+0x11e>
 8004442:	2b60      	cmp	r3, #96	; 0x60
 8004444:	d877      	bhi.n	8004536 <HAL_TIM_ConfigClockSource+0x170>
 8004446:	2b50      	cmp	r3, #80	; 0x50
 8004448:	d03c      	beq.n	80044c4 <HAL_TIM_ConfigClockSource+0xfe>
 800444a:	2b50      	cmp	r3, #80	; 0x50
 800444c:	d873      	bhi.n	8004536 <HAL_TIM_ConfigClockSource+0x170>
 800444e:	2b40      	cmp	r3, #64	; 0x40
 8004450:	d058      	beq.n	8004504 <HAL_TIM_ConfigClockSource+0x13e>
 8004452:	2b40      	cmp	r3, #64	; 0x40
 8004454:	d86f      	bhi.n	8004536 <HAL_TIM_ConfigClockSource+0x170>
 8004456:	2b30      	cmp	r3, #48	; 0x30
 8004458:	d064      	beq.n	8004524 <HAL_TIM_ConfigClockSource+0x15e>
 800445a:	2b30      	cmp	r3, #48	; 0x30
 800445c:	d86b      	bhi.n	8004536 <HAL_TIM_ConfigClockSource+0x170>
 800445e:	2b20      	cmp	r3, #32
 8004460:	d060      	beq.n	8004524 <HAL_TIM_ConfigClockSource+0x15e>
 8004462:	2b20      	cmp	r3, #32
 8004464:	d867      	bhi.n	8004536 <HAL_TIM_ConfigClockSource+0x170>
 8004466:	2b00      	cmp	r3, #0
 8004468:	d05c      	beq.n	8004524 <HAL_TIM_ConfigClockSource+0x15e>
 800446a:	2b10      	cmp	r3, #16
 800446c:	d05a      	beq.n	8004524 <HAL_TIM_ConfigClockSource+0x15e>
 800446e:	e062      	b.n	8004536 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004480:	f000 fac0 	bl	8004a04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004492:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	609a      	str	r2, [r3, #8]
      break;
 800449c:	e04f      	b.n	800453e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044ae:	f000 faa9 	bl	8004a04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044c0:	609a      	str	r2, [r3, #8]
      break;
 80044c2:	e03c      	b.n	800453e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d0:	461a      	mov	r2, r3
 80044d2:	f000 f967 	bl	80047a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2150      	movs	r1, #80	; 0x50
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fa76 	bl	80049ce <TIM_ITRx_SetConfig>
      break;
 80044e2:	e02c      	b.n	800453e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044f0:	461a      	mov	r2, r3
 80044f2:	f000 f9c3 	bl	800487c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2160      	movs	r1, #96	; 0x60
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fa66 	bl	80049ce <TIM_ITRx_SetConfig>
      break;
 8004502:	e01c      	b.n	800453e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004510:	461a      	mov	r2, r3
 8004512:	f000 f947 	bl	80047a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2140      	movs	r1, #64	; 0x40
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fa56 	bl	80049ce <TIM_ITRx_SetConfig>
      break;
 8004522:	e00c      	b.n	800453e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4619      	mov	r1, r3
 800452e:	4610      	mov	r0, r2
 8004530:	f000 fa4d 	bl	80049ce <TIM_ITRx_SetConfig>
      break;
 8004534:	e003      	b.n	800453e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	73fb      	strb	r3, [r7, #15]
      break;
 800453a:	e000      	b.n	800453e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800453c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800454e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b0c      	cmp	r3, #12
 800456a:	d831      	bhi.n	80045d0 <HAL_TIM_ReadCapturedValue+0x78>
 800456c:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <HAL_TIM_ReadCapturedValue+0x1c>)
 800456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004572:	bf00      	nop
 8004574:	080045a9 	.word	0x080045a9
 8004578:	080045d1 	.word	0x080045d1
 800457c:	080045d1 	.word	0x080045d1
 8004580:	080045d1 	.word	0x080045d1
 8004584:	080045b3 	.word	0x080045b3
 8004588:	080045d1 	.word	0x080045d1
 800458c:	080045d1 	.word	0x080045d1
 8004590:	080045d1 	.word	0x080045d1
 8004594:	080045bd 	.word	0x080045bd
 8004598:	080045d1 	.word	0x080045d1
 800459c:	080045d1 	.word	0x080045d1
 80045a0:	080045d1 	.word	0x080045d1
 80045a4:	080045c7 	.word	0x080045c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ae:	60fb      	str	r3, [r7, #12]

      break;
 80045b0:	e00f      	b.n	80045d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	60fb      	str	r3, [r7, #12]

      break;
 80045ba:	e00a      	b.n	80045d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c2:	60fb      	str	r3, [r7, #12]

      break;
 80045c4:	e005      	b.n	80045d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	60fb      	str	r3, [r7, #12]

      break;
 80045ce:	e000      	b.n	80045d2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80045d0:	bf00      	nop
  }

  return tmpreg;
 80045d2:	68fb      	ldr	r3, [r7, #12]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a2e      	ldr	r2, [pc, #184]	; (80046e8 <TIM_Base_SetConfig+0xcc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d003      	beq.n	800463c <TIM_Base_SetConfig+0x20>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463a:	d108      	bne.n	800464e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a25      	ldr	r2, [pc, #148]	; (80046e8 <TIM_Base_SetConfig+0xcc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00f      	beq.n	8004676 <TIM_Base_SetConfig+0x5a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465c:	d00b      	beq.n	8004676 <TIM_Base_SetConfig+0x5a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a22      	ldr	r2, [pc, #136]	; (80046ec <TIM_Base_SetConfig+0xd0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d007      	beq.n	8004676 <TIM_Base_SetConfig+0x5a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a21      	ldr	r2, [pc, #132]	; (80046f0 <TIM_Base_SetConfig+0xd4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d003      	beq.n	8004676 <TIM_Base_SetConfig+0x5a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a20      	ldr	r2, [pc, #128]	; (80046f4 <TIM_Base_SetConfig+0xd8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d108      	bne.n	8004688 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4313      	orrs	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a0e      	ldr	r2, [pc, #56]	; (80046e8 <TIM_Base_SetConfig+0xcc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00b      	beq.n	80046cc <TIM_Base_SetConfig+0xb0>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a0d      	ldr	r2, [pc, #52]	; (80046ec <TIM_Base_SetConfig+0xd0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d007      	beq.n	80046cc <TIM_Base_SetConfig+0xb0>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a0c      	ldr	r2, [pc, #48]	; (80046f0 <TIM_Base_SetConfig+0xd4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d003      	beq.n	80046cc <TIM_Base_SetConfig+0xb0>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a0b      	ldr	r2, [pc, #44]	; (80046f4 <TIM_Base_SetConfig+0xd8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d103      	bne.n	80046d4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	615a      	str	r2, [r3, #20]
}
 80046da:	bf00      	nop
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40012c00 	.word	0x40012c00
 80046ec:	40014000 	.word	0x40014000
 80046f0:	40014400 	.word	0x40014400
 80046f4:	40014800 	.word	0x40014800

080046f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f023 0201 	bic.w	r2, r3, #1
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a1e      	ldr	r2, [pc, #120]	; (800479c <TIM_TI1_SetConfig+0xa4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d007      	beq.n	8004736 <TIM_TI1_SetConfig+0x3e>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472c:	d003      	beq.n	8004736 <TIM_TI1_SetConfig+0x3e>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a1b      	ldr	r2, [pc, #108]	; (80047a0 <TIM_TI1_SetConfig+0xa8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d101      	bne.n	800473a <TIM_TI1_SetConfig+0x42>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <TIM_TI1_SetConfig+0x44>
 800473a:	2300      	movs	r3, #0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f023 0303 	bic.w	r3, r3, #3
 8004746:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e003      	b.n	800475a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004760:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	b2db      	uxtb	r3, r3
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f023 030a 	bic.w	r3, r3, #10
 8004774:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f003 030a 	and.w	r3, r3, #10
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	621a      	str	r2, [r3, #32]
}
 800478e:	bf00      	nop
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40014000 	.word	0x40014000

080047a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f023 0201 	bic.w	r2, r3, #1
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f023 030a 	bic.w	r3, r3, #10
 80047e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	621a      	str	r2, [r3, #32]
}
 80047f6:	bf00      	nop
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004802:	b480      	push	{r7}
 8004804:	b087      	sub	sp, #28
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
 800480e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	f023 0210 	bic.w	r2, r3, #16
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	021b      	lsls	r3, r3, #8
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004840:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	031b      	lsls	r3, r3, #12
 8004846:	b29b      	uxth	r3, r3
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004854:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	621a      	str	r2, [r3, #32]
}
 8004870:	bf00      	nop
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	f023 0210 	bic.w	r2, r3, #16
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	031b      	lsls	r3, r3, #12
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	621a      	str	r2, [r3, #32]
}
 80048d0:	bf00      	nop
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f023 0303 	bic.w	r3, r3, #3
 8004908:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004918:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	b2db      	uxtb	r3, r3
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800492c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	621a      	str	r2, [r3, #32]
}
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004980:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004992:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	031b      	lsls	r3, r3, #12
 8004998:	b29b      	uxth	r3, r3
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80049a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	031b      	lsls	r3, r3, #12
 80049ac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	621a      	str	r2, [r3, #32]
}
 80049c2:	bf00      	nop
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b085      	sub	sp, #20
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f043 0307 	orr.w	r3, r3, #7
 80049f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	609a      	str	r2, [r3, #8]
}
 80049f8:	bf00      	nop
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	021a      	lsls	r2, r3, #8
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	609a      	str	r2, [r3, #8]
}
 8004a38:	bf00      	nop
 8004a3a:	371c      	adds	r7, #28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	2201      	movs	r2, #1
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a1a      	ldr	r2, [r3, #32]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	43db      	mvns	r3, r3
 8004a66:	401a      	ands	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a1a      	ldr	r2, [r3, #32]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	621a      	str	r2, [r3, #32]
}
 8004a82:	bf00      	nop
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
	...

08004a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e04f      	b.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a21      	ldr	r2, [pc, #132]	; (8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d108      	bne.n	8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ad8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a14      	ldr	r2, [pc, #80]	; (8004b54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d009      	beq.n	8004b1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b10:	d004      	beq.n	8004b1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a10      	ldr	r2, [pc, #64]	; (8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d10c      	bne.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40014000 	.word	0x40014000

08004b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e040      	b.n	8004c2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fc fa06 	bl	8000fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2224      	movs	r2, #36	; 0x24
 8004bc4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0201 	bic.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f82c 	bl	8004c34 <UART_SetConfig>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e022      	b.n	8004c2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f956 	bl	8004ea0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f9dd 	bl	8004fe4 <UART_CheckIdleState>
 8004c2a:	4603      	mov	r3, r0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b8a      	ldr	r3, [pc, #552]	; (8004e88 <UART_SetConfig+0x254>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	6979      	ldr	r1, [r7, #20]
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a78      	ldr	r2, [pc, #480]	; (8004e8c <UART_SetConfig+0x258>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d120      	bne.n	8004cf2 <UART_SetConfig+0xbe>
 8004cb0:	4b77      	ldr	r3, [pc, #476]	; (8004e90 <UART_SetConfig+0x25c>)
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d817      	bhi.n	8004cec <UART_SetConfig+0xb8>
 8004cbc:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <UART_SetConfig+0x90>)
 8004cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc2:	bf00      	nop
 8004cc4:	08004cd5 	.word	0x08004cd5
 8004cc8:	08004ce1 	.word	0x08004ce1
 8004ccc:	08004ce7 	.word	0x08004ce7
 8004cd0:	08004cdb 	.word	0x08004cdb
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e01d      	b.n	8004d16 <UART_SetConfig+0xe2>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	77fb      	strb	r3, [r7, #31]
 8004cde:	e01a      	b.n	8004d16 <UART_SetConfig+0xe2>
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e017      	b.n	8004d16 <UART_SetConfig+0xe2>
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	77fb      	strb	r3, [r7, #31]
 8004cea:	e014      	b.n	8004d16 <UART_SetConfig+0xe2>
 8004cec:	2310      	movs	r3, #16
 8004cee:	77fb      	strb	r3, [r7, #31]
 8004cf0:	e011      	b.n	8004d16 <UART_SetConfig+0xe2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a67      	ldr	r2, [pc, #412]	; (8004e94 <UART_SetConfig+0x260>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d102      	bne.n	8004d02 <UART_SetConfig+0xce>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	77fb      	strb	r3, [r7, #31]
 8004d00:	e009      	b.n	8004d16 <UART_SetConfig+0xe2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a64      	ldr	r2, [pc, #400]	; (8004e98 <UART_SetConfig+0x264>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d102      	bne.n	8004d12 <UART_SetConfig+0xde>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e001      	b.n	8004d16 <UART_SetConfig+0xe2>
 8004d12:	2310      	movs	r3, #16
 8004d14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d1e:	d15a      	bne.n	8004dd6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004d20:	7ffb      	ldrb	r3, [r7, #31]
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	d827      	bhi.n	8004d76 <UART_SetConfig+0x142>
 8004d26:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <UART_SetConfig+0xf8>)
 8004d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2c:	08004d51 	.word	0x08004d51
 8004d30:	08004d59 	.word	0x08004d59
 8004d34:	08004d61 	.word	0x08004d61
 8004d38:	08004d77 	.word	0x08004d77
 8004d3c:	08004d67 	.word	0x08004d67
 8004d40:	08004d77 	.word	0x08004d77
 8004d44:	08004d77 	.word	0x08004d77
 8004d48:	08004d77 	.word	0x08004d77
 8004d4c:	08004d6f 	.word	0x08004d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d50:	f7fe fc8e 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 8004d54:	61b8      	str	r0, [r7, #24]
        break;
 8004d56:	e013      	b.n	8004d80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d58:	f7fe fcac 	bl	80036b4 <HAL_RCC_GetPCLK2Freq>
 8004d5c:	61b8      	str	r0, [r7, #24]
        break;
 8004d5e:	e00f      	b.n	8004d80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d60:	4b4e      	ldr	r3, [pc, #312]	; (8004e9c <UART_SetConfig+0x268>)
 8004d62:	61bb      	str	r3, [r7, #24]
        break;
 8004d64:	e00c      	b.n	8004d80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d66:	f7fe fc0d 	bl	8003584 <HAL_RCC_GetSysClockFreq>
 8004d6a:	61b8      	str	r0, [r7, #24]
        break;
 8004d6c:	e008      	b.n	8004d80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d72:	61bb      	str	r3, [r7, #24]
        break;
 8004d74:	e004      	b.n	8004d80 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	77bb      	strb	r3, [r7, #30]
        break;
 8004d7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d074      	beq.n	8004e70 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	005a      	lsls	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	441a      	add	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b0f      	cmp	r3, #15
 8004da0:	d916      	bls.n	8004dd0 <UART_SetConfig+0x19c>
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da8:	d212      	bcs.n	8004dd0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	f023 030f 	bic.w	r3, r3, #15
 8004db2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	085b      	lsrs	r3, r3, #1
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	89fb      	ldrh	r3, [r7, #14]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	89fa      	ldrh	r2, [r7, #14]
 8004dcc:	60da      	str	r2, [r3, #12]
 8004dce:	e04f      	b.n	8004e70 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	77bb      	strb	r3, [r7, #30]
 8004dd4:	e04c      	b.n	8004e70 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dd6:	7ffb      	ldrb	r3, [r7, #31]
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d828      	bhi.n	8004e2e <UART_SetConfig+0x1fa>
 8004ddc:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <UART_SetConfig+0x1b0>)
 8004dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de2:	bf00      	nop
 8004de4:	08004e09 	.word	0x08004e09
 8004de8:	08004e11 	.word	0x08004e11
 8004dec:	08004e19 	.word	0x08004e19
 8004df0:	08004e2f 	.word	0x08004e2f
 8004df4:	08004e1f 	.word	0x08004e1f
 8004df8:	08004e2f 	.word	0x08004e2f
 8004dfc:	08004e2f 	.word	0x08004e2f
 8004e00:	08004e2f 	.word	0x08004e2f
 8004e04:	08004e27 	.word	0x08004e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e08:	f7fe fc32 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 8004e0c:	61b8      	str	r0, [r7, #24]
        break;
 8004e0e:	e013      	b.n	8004e38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e10:	f7fe fc50 	bl	80036b4 <HAL_RCC_GetPCLK2Freq>
 8004e14:	61b8      	str	r0, [r7, #24]
        break;
 8004e16:	e00f      	b.n	8004e38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e18:	4b20      	ldr	r3, [pc, #128]	; (8004e9c <UART_SetConfig+0x268>)
 8004e1a:	61bb      	str	r3, [r7, #24]
        break;
 8004e1c:	e00c      	b.n	8004e38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e1e:	f7fe fbb1 	bl	8003584 <HAL_RCC_GetSysClockFreq>
 8004e22:	61b8      	str	r0, [r7, #24]
        break;
 8004e24:	e008      	b.n	8004e38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e2a:	61bb      	str	r3, [r7, #24]
        break;
 8004e2c:	e004      	b.n	8004e38 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	77bb      	strb	r3, [r7, #30]
        break;
 8004e36:	bf00      	nop
    }

    if (pclk != 0U)
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d018      	beq.n	8004e70 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	085a      	lsrs	r2, r3, #1
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	441a      	add	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b0f      	cmp	r3, #15
 8004e56:	d909      	bls.n	8004e6c <UART_SetConfig+0x238>
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5e:	d205      	bcs.n	8004e6c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	60da      	str	r2, [r3, #12]
 8004e6a:	e001      	b.n	8004e70 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3720      	adds	r7, #32
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	efff69f3 	.word	0xefff69f3
 8004e8c:	40013800 	.word	0x40013800
 8004e90:	40021000 	.word	0x40021000
 8004e94:	40004400 	.word	0x40004400
 8004e98:	40004800 	.word	0x40004800
 8004e9c:	007a1200 	.word	0x007a1200

08004ea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01a      	beq.n	8004fb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f9e:	d10a      	bne.n	8004fb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	605a      	str	r2, [r3, #4]
  }
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b098      	sub	sp, #96	; 0x60
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ff4:	f7fc f954 	bl	80012a0 <HAL_GetTick>
 8004ff8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0308 	and.w	r3, r3, #8
 8005004:	2b08      	cmp	r3, #8
 8005006:	d12e      	bne.n	8005066 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005010:	2200      	movs	r2, #0
 8005012:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f88c 	bl	8005134 <UART_WaitOnFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d021      	beq.n	8005066 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005036:	653b      	str	r3, [r7, #80]	; 0x50
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005040:	647b      	str	r3, [r7, #68]	; 0x44
 8005042:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005046:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005048:	e841 2300 	strex	r3, r2, [r1]
 800504c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800504e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e6      	bne.n	8005022 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e062      	b.n	800512c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b04      	cmp	r3, #4
 8005072:	d149      	bne.n	8005108 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005074:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800507c:	2200      	movs	r2, #0
 800507e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f856 	bl	8005134 <UART_WaitOnFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d03c      	beq.n	8005108 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	623b      	str	r3, [r7, #32]
   return(result);
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	461a      	mov	r2, r3
 80050aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ac:	633b      	str	r3, [r7, #48]	; 0x30
 80050ae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e6      	bne.n	800508e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3308      	adds	r3, #8
 80050c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0301 	bic.w	r3, r3, #1
 80050d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3308      	adds	r3, #8
 80050de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050e0:	61fa      	str	r2, [r7, #28]
 80050e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	69b9      	ldr	r1, [r7, #24]
 80050e6:	69fa      	ldr	r2, [r7, #28]
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	617b      	str	r3, [r7, #20]
   return(result);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e5      	bne.n	80050c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e011      	b.n	800512c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2220      	movs	r2, #32
 8005112:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3758      	adds	r7, #88	; 0x58
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005144:	e049      	b.n	80051da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d045      	beq.n	80051da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514e:	f7fc f8a7 	bl	80012a0 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	429a      	cmp	r2, r3
 800515c:	d302      	bcc.n	8005164 <UART_WaitOnFlagUntilTimeout+0x30>
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e048      	b.n	80051fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d031      	beq.n	80051da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b08      	cmp	r3, #8
 8005182:	d110      	bne.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2208      	movs	r2, #8
 800518a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f838 	bl	8005202 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2208      	movs	r2, #8
 8005196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e029      	b.n	80051fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b4:	d111      	bne.n	80051da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 f81e 	bl	8005202 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e00f      	b.n	80051fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4013      	ands	r3, r2
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	bf0c      	ite	eq
 80051ea:	2301      	moveq	r3, #1
 80051ec:	2300      	movne	r3, #0
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	461a      	mov	r2, r3
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d0a6      	beq.n	8005146 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005202:	b480      	push	{r7}
 8005204:	b095      	sub	sp, #84	; 0x54
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800521e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005228:	643b      	str	r3, [r7, #64]	; 0x40
 800522a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800522e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e6      	bne.n	800520a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3308      	adds	r3, #8
 8005242:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	61fb      	str	r3, [r7, #28]
   return(result);
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f023 0301 	bic.w	r3, r3, #1
 8005252:	64bb      	str	r3, [r7, #72]	; 0x48
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3308      	adds	r3, #8
 800525a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800525c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e5      	bne.n	800523c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005274:	2b01      	cmp	r3, #1
 8005276:	d118      	bne.n	80052aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	60bb      	str	r3, [r7, #8]
   return(result);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f023 0310 	bic.w	r3, r3, #16
 800528c:	647b      	str	r3, [r7, #68]	; 0x44
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005296:	61bb      	str	r3, [r7, #24]
 8005298:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6979      	ldr	r1, [r7, #20]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	613b      	str	r3, [r7, #16]
   return(result);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e6      	bne.n	8005278 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052be:	bf00      	nop
 80052c0:	3754      	adds	r7, #84	; 0x54
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
	...

080052cc <siprintf>:
 80052cc:	b40e      	push	{r1, r2, r3}
 80052ce:	b500      	push	{lr}
 80052d0:	b09c      	sub	sp, #112	; 0x70
 80052d2:	ab1d      	add	r3, sp, #116	; 0x74
 80052d4:	9002      	str	r0, [sp, #8]
 80052d6:	9006      	str	r0, [sp, #24]
 80052d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052dc:	4809      	ldr	r0, [pc, #36]	; (8005304 <siprintf+0x38>)
 80052de:	9107      	str	r1, [sp, #28]
 80052e0:	9104      	str	r1, [sp, #16]
 80052e2:	4909      	ldr	r1, [pc, #36]	; (8005308 <siprintf+0x3c>)
 80052e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80052e8:	9105      	str	r1, [sp, #20]
 80052ea:	6800      	ldr	r0, [r0, #0]
 80052ec:	9301      	str	r3, [sp, #4]
 80052ee:	a902      	add	r1, sp, #8
 80052f0:	f000 f9ba 	bl	8005668 <_svfiprintf_r>
 80052f4:	9b02      	ldr	r3, [sp, #8]
 80052f6:	2200      	movs	r2, #0
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	b01c      	add	sp, #112	; 0x70
 80052fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005300:	b003      	add	sp, #12
 8005302:	4770      	bx	lr
 8005304:	2000006c 	.word	0x2000006c
 8005308:	ffff0208 	.word	0xffff0208

0800530c <memmove>:
 800530c:	4288      	cmp	r0, r1
 800530e:	b510      	push	{r4, lr}
 8005310:	eb01 0402 	add.w	r4, r1, r2
 8005314:	d902      	bls.n	800531c <memmove+0x10>
 8005316:	4284      	cmp	r4, r0
 8005318:	4623      	mov	r3, r4
 800531a:	d807      	bhi.n	800532c <memmove+0x20>
 800531c:	1e43      	subs	r3, r0, #1
 800531e:	42a1      	cmp	r1, r4
 8005320:	d008      	beq.n	8005334 <memmove+0x28>
 8005322:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005326:	f803 2f01 	strb.w	r2, [r3, #1]!
 800532a:	e7f8      	b.n	800531e <memmove+0x12>
 800532c:	4402      	add	r2, r0
 800532e:	4601      	mov	r1, r0
 8005330:	428a      	cmp	r2, r1
 8005332:	d100      	bne.n	8005336 <memmove+0x2a>
 8005334:	bd10      	pop	{r4, pc}
 8005336:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800533a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800533e:	e7f7      	b.n	8005330 <memmove+0x24>

08005340 <memset>:
 8005340:	4402      	add	r2, r0
 8005342:	4603      	mov	r3, r0
 8005344:	4293      	cmp	r3, r2
 8005346:	d100      	bne.n	800534a <memset+0xa>
 8005348:	4770      	bx	lr
 800534a:	f803 1b01 	strb.w	r1, [r3], #1
 800534e:	e7f9      	b.n	8005344 <memset+0x4>

08005350 <__errno>:
 8005350:	4b01      	ldr	r3, [pc, #4]	; (8005358 <__errno+0x8>)
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	2000006c 	.word	0x2000006c

0800535c <__libc_init_array>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	4d0d      	ldr	r5, [pc, #52]	; (8005394 <__libc_init_array+0x38>)
 8005360:	4c0d      	ldr	r4, [pc, #52]	; (8005398 <__libc_init_array+0x3c>)
 8005362:	1b64      	subs	r4, r4, r5
 8005364:	10a4      	asrs	r4, r4, #2
 8005366:	2600      	movs	r6, #0
 8005368:	42a6      	cmp	r6, r4
 800536a:	d109      	bne.n	8005380 <__libc_init_array+0x24>
 800536c:	4d0b      	ldr	r5, [pc, #44]	; (800539c <__libc_init_array+0x40>)
 800536e:	4c0c      	ldr	r4, [pc, #48]	; (80053a0 <__libc_init_array+0x44>)
 8005370:	f000 fc50 	bl	8005c14 <_init>
 8005374:	1b64      	subs	r4, r4, r5
 8005376:	10a4      	asrs	r4, r4, #2
 8005378:	2600      	movs	r6, #0
 800537a:	42a6      	cmp	r6, r4
 800537c:	d105      	bne.n	800538a <__libc_init_array+0x2e>
 800537e:	bd70      	pop	{r4, r5, r6, pc}
 8005380:	f855 3b04 	ldr.w	r3, [r5], #4
 8005384:	4798      	blx	r3
 8005386:	3601      	adds	r6, #1
 8005388:	e7ee      	b.n	8005368 <__libc_init_array+0xc>
 800538a:	f855 3b04 	ldr.w	r3, [r5], #4
 800538e:	4798      	blx	r3
 8005390:	3601      	adds	r6, #1
 8005392:	e7f2      	b.n	800537a <__libc_init_array+0x1e>
 8005394:	08007968 	.word	0x08007968
 8005398:	08007968 	.word	0x08007968
 800539c:	08007968 	.word	0x08007968
 80053a0:	0800796c 	.word	0x0800796c

080053a4 <__retarget_lock_acquire_recursive>:
 80053a4:	4770      	bx	lr

080053a6 <__retarget_lock_release_recursive>:
 80053a6:	4770      	bx	lr

080053a8 <memcpy>:
 80053a8:	440a      	add	r2, r1
 80053aa:	4291      	cmp	r1, r2
 80053ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80053b0:	d100      	bne.n	80053b4 <memcpy+0xc>
 80053b2:	4770      	bx	lr
 80053b4:	b510      	push	{r4, lr}
 80053b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053be:	4291      	cmp	r1, r2
 80053c0:	d1f9      	bne.n	80053b6 <memcpy+0xe>
 80053c2:	bd10      	pop	{r4, pc}

080053c4 <_free_r>:
 80053c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053c6:	2900      	cmp	r1, #0
 80053c8:	d044      	beq.n	8005454 <_free_r+0x90>
 80053ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ce:	9001      	str	r0, [sp, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f1a1 0404 	sub.w	r4, r1, #4
 80053d6:	bfb8      	it	lt
 80053d8:	18e4      	addlt	r4, r4, r3
 80053da:	f000 f8df 	bl	800559c <__malloc_lock>
 80053de:	4a1e      	ldr	r2, [pc, #120]	; (8005458 <_free_r+0x94>)
 80053e0:	9801      	ldr	r0, [sp, #4]
 80053e2:	6813      	ldr	r3, [r2, #0]
 80053e4:	b933      	cbnz	r3, 80053f4 <_free_r+0x30>
 80053e6:	6063      	str	r3, [r4, #4]
 80053e8:	6014      	str	r4, [r2, #0]
 80053ea:	b003      	add	sp, #12
 80053ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053f0:	f000 b8da 	b.w	80055a8 <__malloc_unlock>
 80053f4:	42a3      	cmp	r3, r4
 80053f6:	d908      	bls.n	800540a <_free_r+0x46>
 80053f8:	6825      	ldr	r5, [r4, #0]
 80053fa:	1961      	adds	r1, r4, r5
 80053fc:	428b      	cmp	r3, r1
 80053fe:	bf01      	itttt	eq
 8005400:	6819      	ldreq	r1, [r3, #0]
 8005402:	685b      	ldreq	r3, [r3, #4]
 8005404:	1949      	addeq	r1, r1, r5
 8005406:	6021      	streq	r1, [r4, #0]
 8005408:	e7ed      	b.n	80053e6 <_free_r+0x22>
 800540a:	461a      	mov	r2, r3
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	b10b      	cbz	r3, 8005414 <_free_r+0x50>
 8005410:	42a3      	cmp	r3, r4
 8005412:	d9fa      	bls.n	800540a <_free_r+0x46>
 8005414:	6811      	ldr	r1, [r2, #0]
 8005416:	1855      	adds	r5, r2, r1
 8005418:	42a5      	cmp	r5, r4
 800541a:	d10b      	bne.n	8005434 <_free_r+0x70>
 800541c:	6824      	ldr	r4, [r4, #0]
 800541e:	4421      	add	r1, r4
 8005420:	1854      	adds	r4, r2, r1
 8005422:	42a3      	cmp	r3, r4
 8005424:	6011      	str	r1, [r2, #0]
 8005426:	d1e0      	bne.n	80053ea <_free_r+0x26>
 8005428:	681c      	ldr	r4, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	6053      	str	r3, [r2, #4]
 800542e:	440c      	add	r4, r1
 8005430:	6014      	str	r4, [r2, #0]
 8005432:	e7da      	b.n	80053ea <_free_r+0x26>
 8005434:	d902      	bls.n	800543c <_free_r+0x78>
 8005436:	230c      	movs	r3, #12
 8005438:	6003      	str	r3, [r0, #0]
 800543a:	e7d6      	b.n	80053ea <_free_r+0x26>
 800543c:	6825      	ldr	r5, [r4, #0]
 800543e:	1961      	adds	r1, r4, r5
 8005440:	428b      	cmp	r3, r1
 8005442:	bf04      	itt	eq
 8005444:	6819      	ldreq	r1, [r3, #0]
 8005446:	685b      	ldreq	r3, [r3, #4]
 8005448:	6063      	str	r3, [r4, #4]
 800544a:	bf04      	itt	eq
 800544c:	1949      	addeq	r1, r1, r5
 800544e:	6021      	streq	r1, [r4, #0]
 8005450:	6054      	str	r4, [r2, #4]
 8005452:	e7ca      	b.n	80053ea <_free_r+0x26>
 8005454:	b003      	add	sp, #12
 8005456:	bd30      	pop	{r4, r5, pc}
 8005458:	2000077c 	.word	0x2000077c

0800545c <sbrk_aligned>:
 800545c:	b570      	push	{r4, r5, r6, lr}
 800545e:	4e0e      	ldr	r6, [pc, #56]	; (8005498 <sbrk_aligned+0x3c>)
 8005460:	460c      	mov	r4, r1
 8005462:	6831      	ldr	r1, [r6, #0]
 8005464:	4605      	mov	r5, r0
 8005466:	b911      	cbnz	r1, 800546e <sbrk_aligned+0x12>
 8005468:	f000 fb8c 	bl	8005b84 <_sbrk_r>
 800546c:	6030      	str	r0, [r6, #0]
 800546e:	4621      	mov	r1, r4
 8005470:	4628      	mov	r0, r5
 8005472:	f000 fb87 	bl	8005b84 <_sbrk_r>
 8005476:	1c43      	adds	r3, r0, #1
 8005478:	d00a      	beq.n	8005490 <sbrk_aligned+0x34>
 800547a:	1cc4      	adds	r4, r0, #3
 800547c:	f024 0403 	bic.w	r4, r4, #3
 8005480:	42a0      	cmp	r0, r4
 8005482:	d007      	beq.n	8005494 <sbrk_aligned+0x38>
 8005484:	1a21      	subs	r1, r4, r0
 8005486:	4628      	mov	r0, r5
 8005488:	f000 fb7c 	bl	8005b84 <_sbrk_r>
 800548c:	3001      	adds	r0, #1
 800548e:	d101      	bne.n	8005494 <sbrk_aligned+0x38>
 8005490:	f04f 34ff 	mov.w	r4, #4294967295
 8005494:	4620      	mov	r0, r4
 8005496:	bd70      	pop	{r4, r5, r6, pc}
 8005498:	20000780 	.word	0x20000780

0800549c <_malloc_r>:
 800549c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054a0:	1ccd      	adds	r5, r1, #3
 80054a2:	f025 0503 	bic.w	r5, r5, #3
 80054a6:	3508      	adds	r5, #8
 80054a8:	2d0c      	cmp	r5, #12
 80054aa:	bf38      	it	cc
 80054ac:	250c      	movcc	r5, #12
 80054ae:	2d00      	cmp	r5, #0
 80054b0:	4607      	mov	r7, r0
 80054b2:	db01      	blt.n	80054b8 <_malloc_r+0x1c>
 80054b4:	42a9      	cmp	r1, r5
 80054b6:	d905      	bls.n	80054c4 <_malloc_r+0x28>
 80054b8:	230c      	movs	r3, #12
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	2600      	movs	r6, #0
 80054be:	4630      	mov	r0, r6
 80054c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005598 <_malloc_r+0xfc>
 80054c8:	f000 f868 	bl	800559c <__malloc_lock>
 80054cc:	f8d8 3000 	ldr.w	r3, [r8]
 80054d0:	461c      	mov	r4, r3
 80054d2:	bb5c      	cbnz	r4, 800552c <_malloc_r+0x90>
 80054d4:	4629      	mov	r1, r5
 80054d6:	4638      	mov	r0, r7
 80054d8:	f7ff ffc0 	bl	800545c <sbrk_aligned>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	4604      	mov	r4, r0
 80054e0:	d155      	bne.n	800558e <_malloc_r+0xf2>
 80054e2:	f8d8 4000 	ldr.w	r4, [r8]
 80054e6:	4626      	mov	r6, r4
 80054e8:	2e00      	cmp	r6, #0
 80054ea:	d145      	bne.n	8005578 <_malloc_r+0xdc>
 80054ec:	2c00      	cmp	r4, #0
 80054ee:	d048      	beq.n	8005582 <_malloc_r+0xe6>
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	4631      	mov	r1, r6
 80054f4:	4638      	mov	r0, r7
 80054f6:	eb04 0903 	add.w	r9, r4, r3
 80054fa:	f000 fb43 	bl	8005b84 <_sbrk_r>
 80054fe:	4581      	cmp	r9, r0
 8005500:	d13f      	bne.n	8005582 <_malloc_r+0xe6>
 8005502:	6821      	ldr	r1, [r4, #0]
 8005504:	1a6d      	subs	r5, r5, r1
 8005506:	4629      	mov	r1, r5
 8005508:	4638      	mov	r0, r7
 800550a:	f7ff ffa7 	bl	800545c <sbrk_aligned>
 800550e:	3001      	adds	r0, #1
 8005510:	d037      	beq.n	8005582 <_malloc_r+0xe6>
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	442b      	add	r3, r5
 8005516:	6023      	str	r3, [r4, #0]
 8005518:	f8d8 3000 	ldr.w	r3, [r8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d038      	beq.n	8005592 <_malloc_r+0xf6>
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	42a2      	cmp	r2, r4
 8005524:	d12b      	bne.n	800557e <_malloc_r+0xe2>
 8005526:	2200      	movs	r2, #0
 8005528:	605a      	str	r2, [r3, #4]
 800552a:	e00f      	b.n	800554c <_malloc_r+0xb0>
 800552c:	6822      	ldr	r2, [r4, #0]
 800552e:	1b52      	subs	r2, r2, r5
 8005530:	d41f      	bmi.n	8005572 <_malloc_r+0xd6>
 8005532:	2a0b      	cmp	r2, #11
 8005534:	d917      	bls.n	8005566 <_malloc_r+0xca>
 8005536:	1961      	adds	r1, r4, r5
 8005538:	42a3      	cmp	r3, r4
 800553a:	6025      	str	r5, [r4, #0]
 800553c:	bf18      	it	ne
 800553e:	6059      	strne	r1, [r3, #4]
 8005540:	6863      	ldr	r3, [r4, #4]
 8005542:	bf08      	it	eq
 8005544:	f8c8 1000 	streq.w	r1, [r8]
 8005548:	5162      	str	r2, [r4, r5]
 800554a:	604b      	str	r3, [r1, #4]
 800554c:	4638      	mov	r0, r7
 800554e:	f104 060b 	add.w	r6, r4, #11
 8005552:	f000 f829 	bl	80055a8 <__malloc_unlock>
 8005556:	f026 0607 	bic.w	r6, r6, #7
 800555a:	1d23      	adds	r3, r4, #4
 800555c:	1af2      	subs	r2, r6, r3
 800555e:	d0ae      	beq.n	80054be <_malloc_r+0x22>
 8005560:	1b9b      	subs	r3, r3, r6
 8005562:	50a3      	str	r3, [r4, r2]
 8005564:	e7ab      	b.n	80054be <_malloc_r+0x22>
 8005566:	42a3      	cmp	r3, r4
 8005568:	6862      	ldr	r2, [r4, #4]
 800556a:	d1dd      	bne.n	8005528 <_malloc_r+0x8c>
 800556c:	f8c8 2000 	str.w	r2, [r8]
 8005570:	e7ec      	b.n	800554c <_malloc_r+0xb0>
 8005572:	4623      	mov	r3, r4
 8005574:	6864      	ldr	r4, [r4, #4]
 8005576:	e7ac      	b.n	80054d2 <_malloc_r+0x36>
 8005578:	4634      	mov	r4, r6
 800557a:	6876      	ldr	r6, [r6, #4]
 800557c:	e7b4      	b.n	80054e8 <_malloc_r+0x4c>
 800557e:	4613      	mov	r3, r2
 8005580:	e7cc      	b.n	800551c <_malloc_r+0x80>
 8005582:	230c      	movs	r3, #12
 8005584:	603b      	str	r3, [r7, #0]
 8005586:	4638      	mov	r0, r7
 8005588:	f000 f80e 	bl	80055a8 <__malloc_unlock>
 800558c:	e797      	b.n	80054be <_malloc_r+0x22>
 800558e:	6025      	str	r5, [r4, #0]
 8005590:	e7dc      	b.n	800554c <_malloc_r+0xb0>
 8005592:	605b      	str	r3, [r3, #4]
 8005594:	deff      	udf	#255	; 0xff
 8005596:	bf00      	nop
 8005598:	2000077c 	.word	0x2000077c

0800559c <__malloc_lock>:
 800559c:	4801      	ldr	r0, [pc, #4]	; (80055a4 <__malloc_lock+0x8>)
 800559e:	f7ff bf01 	b.w	80053a4 <__retarget_lock_acquire_recursive>
 80055a2:	bf00      	nop
 80055a4:	20000778 	.word	0x20000778

080055a8 <__malloc_unlock>:
 80055a8:	4801      	ldr	r0, [pc, #4]	; (80055b0 <__malloc_unlock+0x8>)
 80055aa:	f7ff befc 	b.w	80053a6 <__retarget_lock_release_recursive>
 80055ae:	bf00      	nop
 80055b0:	20000778 	.word	0x20000778

080055b4 <__ssputs_r>:
 80055b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055b8:	688e      	ldr	r6, [r1, #8]
 80055ba:	461f      	mov	r7, r3
 80055bc:	42be      	cmp	r6, r7
 80055be:	680b      	ldr	r3, [r1, #0]
 80055c0:	4682      	mov	sl, r0
 80055c2:	460c      	mov	r4, r1
 80055c4:	4690      	mov	r8, r2
 80055c6:	d82c      	bhi.n	8005622 <__ssputs_r+0x6e>
 80055c8:	898a      	ldrh	r2, [r1, #12]
 80055ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055ce:	d026      	beq.n	800561e <__ssputs_r+0x6a>
 80055d0:	6965      	ldr	r5, [r4, #20]
 80055d2:	6909      	ldr	r1, [r1, #16]
 80055d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055d8:	eba3 0901 	sub.w	r9, r3, r1
 80055dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055e0:	1c7b      	adds	r3, r7, #1
 80055e2:	444b      	add	r3, r9
 80055e4:	106d      	asrs	r5, r5, #1
 80055e6:	429d      	cmp	r5, r3
 80055e8:	bf38      	it	cc
 80055ea:	461d      	movcc	r5, r3
 80055ec:	0553      	lsls	r3, r2, #21
 80055ee:	d527      	bpl.n	8005640 <__ssputs_r+0x8c>
 80055f0:	4629      	mov	r1, r5
 80055f2:	f7ff ff53 	bl	800549c <_malloc_r>
 80055f6:	4606      	mov	r6, r0
 80055f8:	b360      	cbz	r0, 8005654 <__ssputs_r+0xa0>
 80055fa:	6921      	ldr	r1, [r4, #16]
 80055fc:	464a      	mov	r2, r9
 80055fe:	f7ff fed3 	bl	80053a8 <memcpy>
 8005602:	89a3      	ldrh	r3, [r4, #12]
 8005604:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560c:	81a3      	strh	r3, [r4, #12]
 800560e:	6126      	str	r6, [r4, #16]
 8005610:	6165      	str	r5, [r4, #20]
 8005612:	444e      	add	r6, r9
 8005614:	eba5 0509 	sub.w	r5, r5, r9
 8005618:	6026      	str	r6, [r4, #0]
 800561a:	60a5      	str	r5, [r4, #8]
 800561c:	463e      	mov	r6, r7
 800561e:	42be      	cmp	r6, r7
 8005620:	d900      	bls.n	8005624 <__ssputs_r+0x70>
 8005622:	463e      	mov	r6, r7
 8005624:	6820      	ldr	r0, [r4, #0]
 8005626:	4632      	mov	r2, r6
 8005628:	4641      	mov	r1, r8
 800562a:	f7ff fe6f 	bl	800530c <memmove>
 800562e:	68a3      	ldr	r3, [r4, #8]
 8005630:	1b9b      	subs	r3, r3, r6
 8005632:	60a3      	str	r3, [r4, #8]
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	4433      	add	r3, r6
 8005638:	6023      	str	r3, [r4, #0]
 800563a:	2000      	movs	r0, #0
 800563c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005640:	462a      	mov	r2, r5
 8005642:	f000 faaf 	bl	8005ba4 <_realloc_r>
 8005646:	4606      	mov	r6, r0
 8005648:	2800      	cmp	r0, #0
 800564a:	d1e0      	bne.n	800560e <__ssputs_r+0x5a>
 800564c:	6921      	ldr	r1, [r4, #16]
 800564e:	4650      	mov	r0, sl
 8005650:	f7ff feb8 	bl	80053c4 <_free_r>
 8005654:	230c      	movs	r3, #12
 8005656:	f8ca 3000 	str.w	r3, [sl]
 800565a:	89a3      	ldrh	r3, [r4, #12]
 800565c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005660:	81a3      	strh	r3, [r4, #12]
 8005662:	f04f 30ff 	mov.w	r0, #4294967295
 8005666:	e7e9      	b.n	800563c <__ssputs_r+0x88>

08005668 <_svfiprintf_r>:
 8005668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566c:	4698      	mov	r8, r3
 800566e:	898b      	ldrh	r3, [r1, #12]
 8005670:	061b      	lsls	r3, r3, #24
 8005672:	b09d      	sub	sp, #116	; 0x74
 8005674:	4607      	mov	r7, r0
 8005676:	460d      	mov	r5, r1
 8005678:	4614      	mov	r4, r2
 800567a:	d50e      	bpl.n	800569a <_svfiprintf_r+0x32>
 800567c:	690b      	ldr	r3, [r1, #16]
 800567e:	b963      	cbnz	r3, 800569a <_svfiprintf_r+0x32>
 8005680:	2140      	movs	r1, #64	; 0x40
 8005682:	f7ff ff0b 	bl	800549c <_malloc_r>
 8005686:	6028      	str	r0, [r5, #0]
 8005688:	6128      	str	r0, [r5, #16]
 800568a:	b920      	cbnz	r0, 8005696 <_svfiprintf_r+0x2e>
 800568c:	230c      	movs	r3, #12
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	f04f 30ff 	mov.w	r0, #4294967295
 8005694:	e0d0      	b.n	8005838 <_svfiprintf_r+0x1d0>
 8005696:	2340      	movs	r3, #64	; 0x40
 8005698:	616b      	str	r3, [r5, #20]
 800569a:	2300      	movs	r3, #0
 800569c:	9309      	str	r3, [sp, #36]	; 0x24
 800569e:	2320      	movs	r3, #32
 80056a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80056a8:	2330      	movs	r3, #48	; 0x30
 80056aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005850 <_svfiprintf_r+0x1e8>
 80056ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056b2:	f04f 0901 	mov.w	r9, #1
 80056b6:	4623      	mov	r3, r4
 80056b8:	469a      	mov	sl, r3
 80056ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056be:	b10a      	cbz	r2, 80056c4 <_svfiprintf_r+0x5c>
 80056c0:	2a25      	cmp	r2, #37	; 0x25
 80056c2:	d1f9      	bne.n	80056b8 <_svfiprintf_r+0x50>
 80056c4:	ebba 0b04 	subs.w	fp, sl, r4
 80056c8:	d00b      	beq.n	80056e2 <_svfiprintf_r+0x7a>
 80056ca:	465b      	mov	r3, fp
 80056cc:	4622      	mov	r2, r4
 80056ce:	4629      	mov	r1, r5
 80056d0:	4638      	mov	r0, r7
 80056d2:	f7ff ff6f 	bl	80055b4 <__ssputs_r>
 80056d6:	3001      	adds	r0, #1
 80056d8:	f000 80a9 	beq.w	800582e <_svfiprintf_r+0x1c6>
 80056dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056de:	445a      	add	r2, fp
 80056e0:	9209      	str	r2, [sp, #36]	; 0x24
 80056e2:	f89a 3000 	ldrb.w	r3, [sl]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 80a1 	beq.w	800582e <_svfiprintf_r+0x1c6>
 80056ec:	2300      	movs	r3, #0
 80056ee:	f04f 32ff 	mov.w	r2, #4294967295
 80056f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056f6:	f10a 0a01 	add.w	sl, sl, #1
 80056fa:	9304      	str	r3, [sp, #16]
 80056fc:	9307      	str	r3, [sp, #28]
 80056fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005702:	931a      	str	r3, [sp, #104]	; 0x68
 8005704:	4654      	mov	r4, sl
 8005706:	2205      	movs	r2, #5
 8005708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800570c:	4850      	ldr	r0, [pc, #320]	; (8005850 <_svfiprintf_r+0x1e8>)
 800570e:	f7fa fd5f 	bl	80001d0 <memchr>
 8005712:	9a04      	ldr	r2, [sp, #16]
 8005714:	b9d8      	cbnz	r0, 800574e <_svfiprintf_r+0xe6>
 8005716:	06d0      	lsls	r0, r2, #27
 8005718:	bf44      	itt	mi
 800571a:	2320      	movmi	r3, #32
 800571c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005720:	0711      	lsls	r1, r2, #28
 8005722:	bf44      	itt	mi
 8005724:	232b      	movmi	r3, #43	; 0x2b
 8005726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800572a:	f89a 3000 	ldrb.w	r3, [sl]
 800572e:	2b2a      	cmp	r3, #42	; 0x2a
 8005730:	d015      	beq.n	800575e <_svfiprintf_r+0xf6>
 8005732:	9a07      	ldr	r2, [sp, #28]
 8005734:	4654      	mov	r4, sl
 8005736:	2000      	movs	r0, #0
 8005738:	f04f 0c0a 	mov.w	ip, #10
 800573c:	4621      	mov	r1, r4
 800573e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005742:	3b30      	subs	r3, #48	; 0x30
 8005744:	2b09      	cmp	r3, #9
 8005746:	d94d      	bls.n	80057e4 <_svfiprintf_r+0x17c>
 8005748:	b1b0      	cbz	r0, 8005778 <_svfiprintf_r+0x110>
 800574a:	9207      	str	r2, [sp, #28]
 800574c:	e014      	b.n	8005778 <_svfiprintf_r+0x110>
 800574e:	eba0 0308 	sub.w	r3, r0, r8
 8005752:	fa09 f303 	lsl.w	r3, r9, r3
 8005756:	4313      	orrs	r3, r2
 8005758:	9304      	str	r3, [sp, #16]
 800575a:	46a2      	mov	sl, r4
 800575c:	e7d2      	b.n	8005704 <_svfiprintf_r+0x9c>
 800575e:	9b03      	ldr	r3, [sp, #12]
 8005760:	1d19      	adds	r1, r3, #4
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	9103      	str	r1, [sp, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	bfbb      	ittet	lt
 800576a:	425b      	neglt	r3, r3
 800576c:	f042 0202 	orrlt.w	r2, r2, #2
 8005770:	9307      	strge	r3, [sp, #28]
 8005772:	9307      	strlt	r3, [sp, #28]
 8005774:	bfb8      	it	lt
 8005776:	9204      	strlt	r2, [sp, #16]
 8005778:	7823      	ldrb	r3, [r4, #0]
 800577a:	2b2e      	cmp	r3, #46	; 0x2e
 800577c:	d10c      	bne.n	8005798 <_svfiprintf_r+0x130>
 800577e:	7863      	ldrb	r3, [r4, #1]
 8005780:	2b2a      	cmp	r3, #42	; 0x2a
 8005782:	d134      	bne.n	80057ee <_svfiprintf_r+0x186>
 8005784:	9b03      	ldr	r3, [sp, #12]
 8005786:	1d1a      	adds	r2, r3, #4
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	9203      	str	r2, [sp, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	bfb8      	it	lt
 8005790:	f04f 33ff 	movlt.w	r3, #4294967295
 8005794:	3402      	adds	r4, #2
 8005796:	9305      	str	r3, [sp, #20]
 8005798:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005860 <_svfiprintf_r+0x1f8>
 800579c:	7821      	ldrb	r1, [r4, #0]
 800579e:	2203      	movs	r2, #3
 80057a0:	4650      	mov	r0, sl
 80057a2:	f7fa fd15 	bl	80001d0 <memchr>
 80057a6:	b138      	cbz	r0, 80057b8 <_svfiprintf_r+0x150>
 80057a8:	9b04      	ldr	r3, [sp, #16]
 80057aa:	eba0 000a 	sub.w	r0, r0, sl
 80057ae:	2240      	movs	r2, #64	; 0x40
 80057b0:	4082      	lsls	r2, r0
 80057b2:	4313      	orrs	r3, r2
 80057b4:	3401      	adds	r4, #1
 80057b6:	9304      	str	r3, [sp, #16]
 80057b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057bc:	4825      	ldr	r0, [pc, #148]	; (8005854 <_svfiprintf_r+0x1ec>)
 80057be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057c2:	2206      	movs	r2, #6
 80057c4:	f7fa fd04 	bl	80001d0 <memchr>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d038      	beq.n	800583e <_svfiprintf_r+0x1d6>
 80057cc:	4b22      	ldr	r3, [pc, #136]	; (8005858 <_svfiprintf_r+0x1f0>)
 80057ce:	bb1b      	cbnz	r3, 8005818 <_svfiprintf_r+0x1b0>
 80057d0:	9b03      	ldr	r3, [sp, #12]
 80057d2:	3307      	adds	r3, #7
 80057d4:	f023 0307 	bic.w	r3, r3, #7
 80057d8:	3308      	adds	r3, #8
 80057da:	9303      	str	r3, [sp, #12]
 80057dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057de:	4433      	add	r3, r6
 80057e0:	9309      	str	r3, [sp, #36]	; 0x24
 80057e2:	e768      	b.n	80056b6 <_svfiprintf_r+0x4e>
 80057e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80057e8:	460c      	mov	r4, r1
 80057ea:	2001      	movs	r0, #1
 80057ec:	e7a6      	b.n	800573c <_svfiprintf_r+0xd4>
 80057ee:	2300      	movs	r3, #0
 80057f0:	3401      	adds	r4, #1
 80057f2:	9305      	str	r3, [sp, #20]
 80057f4:	4619      	mov	r1, r3
 80057f6:	f04f 0c0a 	mov.w	ip, #10
 80057fa:	4620      	mov	r0, r4
 80057fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005800:	3a30      	subs	r2, #48	; 0x30
 8005802:	2a09      	cmp	r2, #9
 8005804:	d903      	bls.n	800580e <_svfiprintf_r+0x1a6>
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0c6      	beq.n	8005798 <_svfiprintf_r+0x130>
 800580a:	9105      	str	r1, [sp, #20]
 800580c:	e7c4      	b.n	8005798 <_svfiprintf_r+0x130>
 800580e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005812:	4604      	mov	r4, r0
 8005814:	2301      	movs	r3, #1
 8005816:	e7f0      	b.n	80057fa <_svfiprintf_r+0x192>
 8005818:	ab03      	add	r3, sp, #12
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	462a      	mov	r2, r5
 800581e:	4b0f      	ldr	r3, [pc, #60]	; (800585c <_svfiprintf_r+0x1f4>)
 8005820:	a904      	add	r1, sp, #16
 8005822:	4638      	mov	r0, r7
 8005824:	f3af 8000 	nop.w
 8005828:	1c42      	adds	r2, r0, #1
 800582a:	4606      	mov	r6, r0
 800582c:	d1d6      	bne.n	80057dc <_svfiprintf_r+0x174>
 800582e:	89ab      	ldrh	r3, [r5, #12]
 8005830:	065b      	lsls	r3, r3, #25
 8005832:	f53f af2d 	bmi.w	8005690 <_svfiprintf_r+0x28>
 8005836:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005838:	b01d      	add	sp, #116	; 0x74
 800583a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800583e:	ab03      	add	r3, sp, #12
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	462a      	mov	r2, r5
 8005844:	4b05      	ldr	r3, [pc, #20]	; (800585c <_svfiprintf_r+0x1f4>)
 8005846:	a904      	add	r1, sp, #16
 8005848:	4638      	mov	r0, r7
 800584a:	f000 f879 	bl	8005940 <_printf_i>
 800584e:	e7eb      	b.n	8005828 <_svfiprintf_r+0x1c0>
 8005850:	08007934 	.word	0x08007934
 8005854:	0800793e 	.word	0x0800793e
 8005858:	00000000 	.word	0x00000000
 800585c:	080055b5 	.word	0x080055b5
 8005860:	0800793a 	.word	0x0800793a

08005864 <_printf_common>:
 8005864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005868:	4616      	mov	r6, r2
 800586a:	4699      	mov	r9, r3
 800586c:	688a      	ldr	r2, [r1, #8]
 800586e:	690b      	ldr	r3, [r1, #16]
 8005870:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005874:	4293      	cmp	r3, r2
 8005876:	bfb8      	it	lt
 8005878:	4613      	movlt	r3, r2
 800587a:	6033      	str	r3, [r6, #0]
 800587c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005880:	4607      	mov	r7, r0
 8005882:	460c      	mov	r4, r1
 8005884:	b10a      	cbz	r2, 800588a <_printf_common+0x26>
 8005886:	3301      	adds	r3, #1
 8005888:	6033      	str	r3, [r6, #0]
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	0699      	lsls	r1, r3, #26
 800588e:	bf42      	ittt	mi
 8005890:	6833      	ldrmi	r3, [r6, #0]
 8005892:	3302      	addmi	r3, #2
 8005894:	6033      	strmi	r3, [r6, #0]
 8005896:	6825      	ldr	r5, [r4, #0]
 8005898:	f015 0506 	ands.w	r5, r5, #6
 800589c:	d106      	bne.n	80058ac <_printf_common+0x48>
 800589e:	f104 0a19 	add.w	sl, r4, #25
 80058a2:	68e3      	ldr	r3, [r4, #12]
 80058a4:	6832      	ldr	r2, [r6, #0]
 80058a6:	1a9b      	subs	r3, r3, r2
 80058a8:	42ab      	cmp	r3, r5
 80058aa:	dc26      	bgt.n	80058fa <_printf_common+0x96>
 80058ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058b0:	1e13      	subs	r3, r2, #0
 80058b2:	6822      	ldr	r2, [r4, #0]
 80058b4:	bf18      	it	ne
 80058b6:	2301      	movne	r3, #1
 80058b8:	0692      	lsls	r2, r2, #26
 80058ba:	d42b      	bmi.n	8005914 <_printf_common+0xb0>
 80058bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058c0:	4649      	mov	r1, r9
 80058c2:	4638      	mov	r0, r7
 80058c4:	47c0      	blx	r8
 80058c6:	3001      	adds	r0, #1
 80058c8:	d01e      	beq.n	8005908 <_printf_common+0xa4>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	6922      	ldr	r2, [r4, #16]
 80058ce:	f003 0306 	and.w	r3, r3, #6
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	bf02      	ittt	eq
 80058d6:	68e5      	ldreq	r5, [r4, #12]
 80058d8:	6833      	ldreq	r3, [r6, #0]
 80058da:	1aed      	subeq	r5, r5, r3
 80058dc:	68a3      	ldr	r3, [r4, #8]
 80058de:	bf0c      	ite	eq
 80058e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058e4:	2500      	movne	r5, #0
 80058e6:	4293      	cmp	r3, r2
 80058e8:	bfc4      	itt	gt
 80058ea:	1a9b      	subgt	r3, r3, r2
 80058ec:	18ed      	addgt	r5, r5, r3
 80058ee:	2600      	movs	r6, #0
 80058f0:	341a      	adds	r4, #26
 80058f2:	42b5      	cmp	r5, r6
 80058f4:	d11a      	bne.n	800592c <_printf_common+0xc8>
 80058f6:	2000      	movs	r0, #0
 80058f8:	e008      	b.n	800590c <_printf_common+0xa8>
 80058fa:	2301      	movs	r3, #1
 80058fc:	4652      	mov	r2, sl
 80058fe:	4649      	mov	r1, r9
 8005900:	4638      	mov	r0, r7
 8005902:	47c0      	blx	r8
 8005904:	3001      	adds	r0, #1
 8005906:	d103      	bne.n	8005910 <_printf_common+0xac>
 8005908:	f04f 30ff 	mov.w	r0, #4294967295
 800590c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005910:	3501      	adds	r5, #1
 8005912:	e7c6      	b.n	80058a2 <_printf_common+0x3e>
 8005914:	18e1      	adds	r1, r4, r3
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	2030      	movs	r0, #48	; 0x30
 800591a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800591e:	4422      	add	r2, r4
 8005920:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005924:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005928:	3302      	adds	r3, #2
 800592a:	e7c7      	b.n	80058bc <_printf_common+0x58>
 800592c:	2301      	movs	r3, #1
 800592e:	4622      	mov	r2, r4
 8005930:	4649      	mov	r1, r9
 8005932:	4638      	mov	r0, r7
 8005934:	47c0      	blx	r8
 8005936:	3001      	adds	r0, #1
 8005938:	d0e6      	beq.n	8005908 <_printf_common+0xa4>
 800593a:	3601      	adds	r6, #1
 800593c:	e7d9      	b.n	80058f2 <_printf_common+0x8e>
	...

08005940 <_printf_i>:
 8005940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005944:	7e0f      	ldrb	r7, [r1, #24]
 8005946:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005948:	2f78      	cmp	r7, #120	; 0x78
 800594a:	4691      	mov	r9, r2
 800594c:	4680      	mov	r8, r0
 800594e:	460c      	mov	r4, r1
 8005950:	469a      	mov	sl, r3
 8005952:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005956:	d807      	bhi.n	8005968 <_printf_i+0x28>
 8005958:	2f62      	cmp	r7, #98	; 0x62
 800595a:	d80a      	bhi.n	8005972 <_printf_i+0x32>
 800595c:	2f00      	cmp	r7, #0
 800595e:	f000 80d4 	beq.w	8005b0a <_printf_i+0x1ca>
 8005962:	2f58      	cmp	r7, #88	; 0x58
 8005964:	f000 80c0 	beq.w	8005ae8 <_printf_i+0x1a8>
 8005968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800596c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005970:	e03a      	b.n	80059e8 <_printf_i+0xa8>
 8005972:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005976:	2b15      	cmp	r3, #21
 8005978:	d8f6      	bhi.n	8005968 <_printf_i+0x28>
 800597a:	a101      	add	r1, pc, #4	; (adr r1, 8005980 <_printf_i+0x40>)
 800597c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005980:	080059d9 	.word	0x080059d9
 8005984:	080059ed 	.word	0x080059ed
 8005988:	08005969 	.word	0x08005969
 800598c:	08005969 	.word	0x08005969
 8005990:	08005969 	.word	0x08005969
 8005994:	08005969 	.word	0x08005969
 8005998:	080059ed 	.word	0x080059ed
 800599c:	08005969 	.word	0x08005969
 80059a0:	08005969 	.word	0x08005969
 80059a4:	08005969 	.word	0x08005969
 80059a8:	08005969 	.word	0x08005969
 80059ac:	08005af1 	.word	0x08005af1
 80059b0:	08005a19 	.word	0x08005a19
 80059b4:	08005aab 	.word	0x08005aab
 80059b8:	08005969 	.word	0x08005969
 80059bc:	08005969 	.word	0x08005969
 80059c0:	08005b13 	.word	0x08005b13
 80059c4:	08005969 	.word	0x08005969
 80059c8:	08005a19 	.word	0x08005a19
 80059cc:	08005969 	.word	0x08005969
 80059d0:	08005969 	.word	0x08005969
 80059d4:	08005ab3 	.word	0x08005ab3
 80059d8:	682b      	ldr	r3, [r5, #0]
 80059da:	1d1a      	adds	r2, r3, #4
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	602a      	str	r2, [r5, #0]
 80059e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059e8:	2301      	movs	r3, #1
 80059ea:	e09f      	b.n	8005b2c <_printf_i+0x1ec>
 80059ec:	6820      	ldr	r0, [r4, #0]
 80059ee:	682b      	ldr	r3, [r5, #0]
 80059f0:	0607      	lsls	r7, r0, #24
 80059f2:	f103 0104 	add.w	r1, r3, #4
 80059f6:	6029      	str	r1, [r5, #0]
 80059f8:	d501      	bpl.n	80059fe <_printf_i+0xbe>
 80059fa:	681e      	ldr	r6, [r3, #0]
 80059fc:	e003      	b.n	8005a06 <_printf_i+0xc6>
 80059fe:	0646      	lsls	r6, r0, #25
 8005a00:	d5fb      	bpl.n	80059fa <_printf_i+0xba>
 8005a02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a06:	2e00      	cmp	r6, #0
 8005a08:	da03      	bge.n	8005a12 <_printf_i+0xd2>
 8005a0a:	232d      	movs	r3, #45	; 0x2d
 8005a0c:	4276      	negs	r6, r6
 8005a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a12:	485a      	ldr	r0, [pc, #360]	; (8005b7c <_printf_i+0x23c>)
 8005a14:	230a      	movs	r3, #10
 8005a16:	e012      	b.n	8005a3e <_printf_i+0xfe>
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	6820      	ldr	r0, [r4, #0]
 8005a1c:	1d19      	adds	r1, r3, #4
 8005a1e:	6029      	str	r1, [r5, #0]
 8005a20:	0605      	lsls	r5, r0, #24
 8005a22:	d501      	bpl.n	8005a28 <_printf_i+0xe8>
 8005a24:	681e      	ldr	r6, [r3, #0]
 8005a26:	e002      	b.n	8005a2e <_printf_i+0xee>
 8005a28:	0641      	lsls	r1, r0, #25
 8005a2a:	d5fb      	bpl.n	8005a24 <_printf_i+0xe4>
 8005a2c:	881e      	ldrh	r6, [r3, #0]
 8005a2e:	4853      	ldr	r0, [pc, #332]	; (8005b7c <_printf_i+0x23c>)
 8005a30:	2f6f      	cmp	r7, #111	; 0x6f
 8005a32:	bf0c      	ite	eq
 8005a34:	2308      	moveq	r3, #8
 8005a36:	230a      	movne	r3, #10
 8005a38:	2100      	movs	r1, #0
 8005a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a3e:	6865      	ldr	r5, [r4, #4]
 8005a40:	60a5      	str	r5, [r4, #8]
 8005a42:	2d00      	cmp	r5, #0
 8005a44:	bfa2      	ittt	ge
 8005a46:	6821      	ldrge	r1, [r4, #0]
 8005a48:	f021 0104 	bicge.w	r1, r1, #4
 8005a4c:	6021      	strge	r1, [r4, #0]
 8005a4e:	b90e      	cbnz	r6, 8005a54 <_printf_i+0x114>
 8005a50:	2d00      	cmp	r5, #0
 8005a52:	d04b      	beq.n	8005aec <_printf_i+0x1ac>
 8005a54:	4615      	mov	r5, r2
 8005a56:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a5a:	fb03 6711 	mls	r7, r3, r1, r6
 8005a5e:	5dc7      	ldrb	r7, [r0, r7]
 8005a60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a64:	4637      	mov	r7, r6
 8005a66:	42bb      	cmp	r3, r7
 8005a68:	460e      	mov	r6, r1
 8005a6a:	d9f4      	bls.n	8005a56 <_printf_i+0x116>
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d10b      	bne.n	8005a88 <_printf_i+0x148>
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	07de      	lsls	r6, r3, #31
 8005a74:	d508      	bpl.n	8005a88 <_printf_i+0x148>
 8005a76:	6923      	ldr	r3, [r4, #16]
 8005a78:	6861      	ldr	r1, [r4, #4]
 8005a7a:	4299      	cmp	r1, r3
 8005a7c:	bfde      	ittt	le
 8005a7e:	2330      	movle	r3, #48	; 0x30
 8005a80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a88:	1b52      	subs	r2, r2, r5
 8005a8a:	6122      	str	r2, [r4, #16]
 8005a8c:	f8cd a000 	str.w	sl, [sp]
 8005a90:	464b      	mov	r3, r9
 8005a92:	aa03      	add	r2, sp, #12
 8005a94:	4621      	mov	r1, r4
 8005a96:	4640      	mov	r0, r8
 8005a98:	f7ff fee4 	bl	8005864 <_printf_common>
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d14a      	bne.n	8005b36 <_printf_i+0x1f6>
 8005aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa4:	b004      	add	sp, #16
 8005aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	f043 0320 	orr.w	r3, r3, #32
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	4833      	ldr	r0, [pc, #204]	; (8005b80 <_printf_i+0x240>)
 8005ab4:	2778      	movs	r7, #120	; 0x78
 8005ab6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	6829      	ldr	r1, [r5, #0]
 8005abe:	061f      	lsls	r7, r3, #24
 8005ac0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ac4:	d402      	bmi.n	8005acc <_printf_i+0x18c>
 8005ac6:	065f      	lsls	r7, r3, #25
 8005ac8:	bf48      	it	mi
 8005aca:	b2b6      	uxthmi	r6, r6
 8005acc:	07df      	lsls	r7, r3, #31
 8005ace:	bf48      	it	mi
 8005ad0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ad4:	6029      	str	r1, [r5, #0]
 8005ad6:	bf48      	it	mi
 8005ad8:	6023      	strmi	r3, [r4, #0]
 8005ada:	b91e      	cbnz	r6, 8005ae4 <_printf_i+0x1a4>
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	f023 0320 	bic.w	r3, r3, #32
 8005ae2:	6023      	str	r3, [r4, #0]
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	e7a7      	b.n	8005a38 <_printf_i+0xf8>
 8005ae8:	4824      	ldr	r0, [pc, #144]	; (8005b7c <_printf_i+0x23c>)
 8005aea:	e7e4      	b.n	8005ab6 <_printf_i+0x176>
 8005aec:	4615      	mov	r5, r2
 8005aee:	e7bd      	b.n	8005a6c <_printf_i+0x12c>
 8005af0:	682b      	ldr	r3, [r5, #0]
 8005af2:	6826      	ldr	r6, [r4, #0]
 8005af4:	6961      	ldr	r1, [r4, #20]
 8005af6:	1d18      	adds	r0, r3, #4
 8005af8:	6028      	str	r0, [r5, #0]
 8005afa:	0635      	lsls	r5, r6, #24
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	d501      	bpl.n	8005b04 <_printf_i+0x1c4>
 8005b00:	6019      	str	r1, [r3, #0]
 8005b02:	e002      	b.n	8005b0a <_printf_i+0x1ca>
 8005b04:	0670      	lsls	r0, r6, #25
 8005b06:	d5fb      	bpl.n	8005b00 <_printf_i+0x1c0>
 8005b08:	8019      	strh	r1, [r3, #0]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6123      	str	r3, [r4, #16]
 8005b0e:	4615      	mov	r5, r2
 8005b10:	e7bc      	b.n	8005a8c <_printf_i+0x14c>
 8005b12:	682b      	ldr	r3, [r5, #0]
 8005b14:	1d1a      	adds	r2, r3, #4
 8005b16:	602a      	str	r2, [r5, #0]
 8005b18:	681d      	ldr	r5, [r3, #0]
 8005b1a:	6862      	ldr	r2, [r4, #4]
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	4628      	mov	r0, r5
 8005b20:	f7fa fb56 	bl	80001d0 <memchr>
 8005b24:	b108      	cbz	r0, 8005b2a <_printf_i+0x1ea>
 8005b26:	1b40      	subs	r0, r0, r5
 8005b28:	6060      	str	r0, [r4, #4]
 8005b2a:	6863      	ldr	r3, [r4, #4]
 8005b2c:	6123      	str	r3, [r4, #16]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b34:	e7aa      	b.n	8005a8c <_printf_i+0x14c>
 8005b36:	6923      	ldr	r3, [r4, #16]
 8005b38:	462a      	mov	r2, r5
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	4640      	mov	r0, r8
 8005b3e:	47d0      	blx	sl
 8005b40:	3001      	adds	r0, #1
 8005b42:	d0ad      	beq.n	8005aa0 <_printf_i+0x160>
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	079b      	lsls	r3, r3, #30
 8005b48:	d413      	bmi.n	8005b72 <_printf_i+0x232>
 8005b4a:	68e0      	ldr	r0, [r4, #12]
 8005b4c:	9b03      	ldr	r3, [sp, #12]
 8005b4e:	4298      	cmp	r0, r3
 8005b50:	bfb8      	it	lt
 8005b52:	4618      	movlt	r0, r3
 8005b54:	e7a6      	b.n	8005aa4 <_printf_i+0x164>
 8005b56:	2301      	movs	r3, #1
 8005b58:	4632      	mov	r2, r6
 8005b5a:	4649      	mov	r1, r9
 8005b5c:	4640      	mov	r0, r8
 8005b5e:	47d0      	blx	sl
 8005b60:	3001      	adds	r0, #1
 8005b62:	d09d      	beq.n	8005aa0 <_printf_i+0x160>
 8005b64:	3501      	adds	r5, #1
 8005b66:	68e3      	ldr	r3, [r4, #12]
 8005b68:	9903      	ldr	r1, [sp, #12]
 8005b6a:	1a5b      	subs	r3, r3, r1
 8005b6c:	42ab      	cmp	r3, r5
 8005b6e:	dcf2      	bgt.n	8005b56 <_printf_i+0x216>
 8005b70:	e7eb      	b.n	8005b4a <_printf_i+0x20a>
 8005b72:	2500      	movs	r5, #0
 8005b74:	f104 0619 	add.w	r6, r4, #25
 8005b78:	e7f5      	b.n	8005b66 <_printf_i+0x226>
 8005b7a:	bf00      	nop
 8005b7c:	08007945 	.word	0x08007945
 8005b80:	08007956 	.word	0x08007956

08005b84 <_sbrk_r>:
 8005b84:	b538      	push	{r3, r4, r5, lr}
 8005b86:	4d06      	ldr	r5, [pc, #24]	; (8005ba0 <_sbrk_r+0x1c>)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	602b      	str	r3, [r5, #0]
 8005b90:	f7fb faba 	bl	8001108 <_sbrk>
 8005b94:	1c43      	adds	r3, r0, #1
 8005b96:	d102      	bne.n	8005b9e <_sbrk_r+0x1a>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	b103      	cbz	r3, 8005b9e <_sbrk_r+0x1a>
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ba0:	20000774 	.word	0x20000774

08005ba4 <_realloc_r>:
 8005ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba8:	4680      	mov	r8, r0
 8005baa:	4614      	mov	r4, r2
 8005bac:	460e      	mov	r6, r1
 8005bae:	b921      	cbnz	r1, 8005bba <_realloc_r+0x16>
 8005bb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	f7ff bc71 	b.w	800549c <_malloc_r>
 8005bba:	b92a      	cbnz	r2, 8005bc8 <_realloc_r+0x24>
 8005bbc:	f7ff fc02 	bl	80053c4 <_free_r>
 8005bc0:	4625      	mov	r5, r4
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bc8:	f000 f81b 	bl	8005c02 <_malloc_usable_size_r>
 8005bcc:	4284      	cmp	r4, r0
 8005bce:	4607      	mov	r7, r0
 8005bd0:	d802      	bhi.n	8005bd8 <_realloc_r+0x34>
 8005bd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005bd6:	d812      	bhi.n	8005bfe <_realloc_r+0x5a>
 8005bd8:	4621      	mov	r1, r4
 8005bda:	4640      	mov	r0, r8
 8005bdc:	f7ff fc5e 	bl	800549c <_malloc_r>
 8005be0:	4605      	mov	r5, r0
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d0ed      	beq.n	8005bc2 <_realloc_r+0x1e>
 8005be6:	42bc      	cmp	r4, r7
 8005be8:	4622      	mov	r2, r4
 8005bea:	4631      	mov	r1, r6
 8005bec:	bf28      	it	cs
 8005bee:	463a      	movcs	r2, r7
 8005bf0:	f7ff fbda 	bl	80053a8 <memcpy>
 8005bf4:	4631      	mov	r1, r6
 8005bf6:	4640      	mov	r0, r8
 8005bf8:	f7ff fbe4 	bl	80053c4 <_free_r>
 8005bfc:	e7e1      	b.n	8005bc2 <_realloc_r+0x1e>
 8005bfe:	4635      	mov	r5, r6
 8005c00:	e7df      	b.n	8005bc2 <_realloc_r+0x1e>

08005c02 <_malloc_usable_size_r>:
 8005c02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c06:	1f18      	subs	r0, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	bfbc      	itt	lt
 8005c0c:	580b      	ldrlt	r3, [r1, r0]
 8005c0e:	18c0      	addlt	r0, r0, r3
 8005c10:	4770      	bx	lr
	...

08005c14 <_init>:
 8005c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c16:	bf00      	nop
 8005c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c1a:	bc08      	pop	{r3}
 8005c1c:	469e      	mov	lr, r3
 8005c1e:	4770      	bx	lr

08005c20 <_fini>:
 8005c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c22:	bf00      	nop
 8005c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c26:	bc08      	pop	{r3}
 8005c28:	469e      	mov	lr, r3
 8005c2a:	4770      	bx	lr
